#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(0.4) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
###########Central Limit Theorem Visualized#################
#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(0.9) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
for(i in 1:1000){
Sys.sleep(0.9) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(0.6) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
Sys.sleep(0.8) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
#Sys.sleep(0.8) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
#Sys.sleep(0.8) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
###########Central Limit Theorem Visualized#################
#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(1) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
?Sys.sleep
for(i in 1:1000){
Sys.sleep(.05) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
meanofmeans <- mean(meansofdata)
meanofmeans
for(i in 1:1000){
Sys.sleep(.02) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 50,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
Sys.sleep(.02) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 50,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
Sys.sleep(.1) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
###########Central Limit Theorem Visualized#################
#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(.1) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
for(i in 1:1000){
Sys.sleep(.6) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
###########Central Limit Theorem Visualized#################
#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(.6) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
###########Central Limit Theorem Visualized#################
#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
#What do you expect?
min(UniformData)
max(UniformData)
#What do you expect?
hist(UniformData) #looks like a rectangle!
#What do you  expect the mean to be?
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(.06) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
meanofmeans <- mean(meansofdata)
meanofmeans
library(gapminder)
library(ggplot2)
library(moderndive)
library(skimr)
library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
beans <- read.csv(beans.csv)
beans <- read.csv("beans.csv)
beans <- read.csv("beans.csv")
beans <- read.csv("beans.csv")
beans
hist(jelly)
hist(beans)
hist(beans$jelly)
hist(beans$jelly, breaks = 5)
hist(beans$jelly, breaks = 10)
mean(beans)
mean(beans$jelly)
mean(beans$jelly)
view(beans)
set.seed(2)
UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
min(UniformData)
max(UniformData)
hist(UniformData)
mean(UniformData) #What would a distribution of means look like?
SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
mean(SquareData) #I want to see what 1000 random means looks like!
meansofdata<-NA #lets use a loop, starting with an empty vector to fill
for(i in 1:1000){
Sys.sleep(.06) #Change to speed up or slow down the demo
SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
}
meanofmeans <- mean(meansofdata)
meanofmeans
normie <- rnorm(100, 50, 2)
hist(normie)
normie1000 <- rnorm(1000, 50, 2)
hist(normie1000)
hist(normie1000, breaks = 14)
normie100000 <- rnorm(100000, 50, 2)
hist(normie100000, breaks = 14)
?rpois()
pois1000 <- rpois(1000, 2)
hist(pois1000)
??Hypergeometric
?rbinom
urn <- rbinom(50, 1000, 0.5)
hist(urn)
urn <- rbinom(1000, 5, 0.5)
hist(urn)
urn <- rbinom(1000, 1000, 0.5)
hist(urn)
library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
urnhist <- ggplot(urn, aes(urn)) + geom_histogram(binwidth = 2)
urntable <- data.frame(urn)
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 2)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1)
urnhist
urn <- rbinom(10, 1000, 0.5)
hist(urn)
urn <- rbinom(1000, 10, 0.5)
hist(urn)
urn <- rbinom(100, 10, 0.5)
hist(urn)
urntable <- data.frame(urn)
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
urnhist
urn <- rbinom(1000, 10, 0.5)
urntable <- data.frame(urn)
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
urnhist
urn <- rbinom(250, 10, 0.5)
urntable <- data.frame(urn)
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw() + scale_x_continuous(breaks = 10)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5, breaks = 10) + theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5,boundary=-0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5,boundary=-0.5)+ scale_x_continuous(breaks=0:11)+ theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
urnhist\
urnhist
urn <- rbinom(500, 10, 0.5)
urntable <- data.frame(urn)
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + geom_text(aes(label = count), vjust = 0)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + geom_text(aes(label = urn), vjust = 0)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
aes(label = perc),
hjust = 1, nudge_x = -.5
)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
aes(label = count(urn)),
hjust = 1, nudge_x = -.5
)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
aes(label = urn),
hjust = 1, nudge_x = -.5
)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() +stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1))
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1))
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1)
urnhist
urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
urnhist
urnout <- add_row(urntable, 50)
urnout <- add_row(urntable, urn, 50)
urnout <- c(urn, 50)
urnouttable <- data.frame(urnout)
urnouthist <- ggplot(urnouttable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
urnouthist
urnouthist <- ggplot(urnouttable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
urnouthist
urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
urnouthist
urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
urnouthist
urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_bw
urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_bw()
urnouthist
urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_classic()
urnouthist
library(Rmisc)
library(tidyverse)
tg <- ToothGrowth
head(tg)
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc
?Rmisc
library(Rmisc)
?Rmisc
t.test.5 <- t.test(len ~ supp, data=tg,
var.equal=FALSE,
conf.level=0.95)
t.test.5
setwd("~/BILD 5/Term project")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
BadTable<-read_csv(file= "City,2014,2019
San Antonio,1436697,1547253
Houston,2239558,2320268
Austin,912791,978908",show_col_types = FALSE)
GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
head(GoodTable)
BadTable<-read_csv(file= "City,2014,2019
San Antonio,1436697,1547253
Houston,2239558,2320268
Austin,912791,978908")
show(BadTable)
BadTable<-read_csv(file= "City,2014,2019
San Antonio,1436697,1547253
Houston,2239558,2320268
Austin,912791,978908",show_col_types = FALSE)
GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
head(GoodTable)
SmallerCities<-filter(GoodTable,Population<1500000)
head(SmallerCities)
OrderedGoodTable<-arrange(GoodTable,desc(Population))
head(OrderedGoodTable)
setwd("~/BILD 5/Section Activities/Section 4")
flights<-read.csv("flights.csv")
weather<-read.csv("JFKWeather.csv")
CombinedTable<-inner_join(x = flights,y =weather,by="time_hour" )
str(CombinedTable)
MeanDailyTemp<- weather %>%
group_by(day)%>%
summarise(avg=mean(temp))
str(MeanDailyTemp)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
library(tidyverse)
BadTable<-read_csv(file= "City,2014,2019
San Antonio,1436697,1547253
Houston,2239558,2320268
Austin,912791,978908")
GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
head(GoodTable)
note<-""
print(note)
SmallerCities<-filter(GoodTable,Population<1500000)
head(SmallerCities)
note<-""
print(note)
OrderedGoodTable<-arrange(GoodTable,desc(Population))
head(OrderedGoodTable)
note<-""
print(note)
flights<-read.csv("flights.csv")
weather<-read.csv("JFKWeather.csv")
note<-""
print(note)
CombinedTable<-inner_join(x = flights,y =weather,by="time_hour" )
str(CombinedTable)
note<-""
print(note)
MeanDailyTemp<- weather %>%
group_by(day)%>%
summarise(avg=mean(temp))
str(MeanDailyTemp)
?pivot_longer
setwd("~/BILD 5/Section Activities/Section 5")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
str(ChemData)
ChemData<-read.csv(file="PlantChemistry.csv")
str(ChemData)
Hist_saponins<-ggplot(data = ChemData,mapping = aes(x = saponins))+
geom_histogram()
Hist_saponins
Hist_tannins<-Hist_saponins<-ggplot(data = ChemData,mapping = aes(x = tannins))+
geom_histogram()
Hist_tannins
?ks.test
library(Rmisc)
library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
dat <- c(38.4
46.2
62.5
38.0
62.8
33.9
50.4
35.0
52.8
60.1
55.1
57.6
55.5
49.5
40.9
44.3
93.8
47.9
69.2
46.2
56.3)
dat <- c(38.4, 46.2, 62.5, 38.0, 62.8, 33.9, 50.4, 35.0, 52.8, 60.1, 55.1, 57.6, 55.5, 49.5, 40.9, 44.3, 93.8, 47.9, 69.2, 46.2, 56.3)
Mean(dat)
mean(dat)
?confidence interval
?confidenceinterval
??confidenceinterval
CI(dat)
datlo <- filter_if(dat, >70)
datlo <- filter_if(dat, x>70)
?filter_if
datlo <- c(38.4, 46.2, 62.5, 38.0, 62.8, 33.9, 50.4, 35.0, 52.8, 60.1, 55.1, 57.6, 55.5, 49.5, 40.9, 44.3, 47.9, 69.2, 46.2, 56.3)
CI(datlo)
setwd("~/BILD 5/Section Activities/Section 6")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
W6Data<-read.csv("Week6SoilData.csv")
head(W6Data)
High_Inorganic_N<-sum(W6Data$SoilN2018>0.2)
High_Inorganic_N
GardenData<-pivot_longer(data = W6Data,cols = 2:3,names_to = "Year",values_to = "InorganicN")
str(GardenData)
Histogram1<-ggplot(data = GardenData,mapping = aes(x =InorganicN ))+
geom_histogram()
Histogram1
T_Garden_Data<-mutate(.data = GardenData,sqrtN=sqrt(InorganicN))
str(T_Garden_Data)
Histogram2<-ggplot(data = T_Garden_Data,mapping = aes(x =sqrtN ))+
geom_histogram()
Histogram2
ks.test(x = T_Garden_Data$sqrtN,y = "pnorm", mean(T_Garden_Data$sqrtN),sd(T_Garden_Data$sqrtN))
Boxplot1<-ggplot(data = T_Garden_Data,mapping = aes(x = Year,y = sqrtN))+
geom_boxplot()+
theme_minimal() +
ylab("Square root of Inorganic Nitrogen")
Boxplot1
t_mean<-mean(T_Garden_Data$sqrtN)
tsd<-sd(T_Garden_Data$sqrtN)
t_upper<-qnorm(0.975)*tsd+t_mean
# If they use 1.96 instead of qnorm here that is fine.
t_lower<-qnorm(0.025)*tsd+t_mean
upperCI<-t_upper^2
meanN<-t_mean^2
lowerCI<-t_lower^2
cbind(upperCI,meanN,lowerCI)
setwd("~/BILD 5/Term project")
