1634084585742:library(tidyverse)
1634084628223:install.packages(c("broom", "bslib", "cachem", "caret", "cpp11", "data.table", "desc", "dials", "diffobj", "digest", "DT", "fansi", "future", "gert", "googlesheets4", "haven", "hms", "htmltools", "htmlwidgets", "httpuv", "infer", "ipred", "knitr", "later", "lattice", "lava", "lhs", "lifecycle", "lubridate", "mgcv", "mime", "nlme", "openssl", "parallelly", "pillar", "pkgload", "pROC", "R6", "rcmdcheck", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "reprex", "rmarkdown", "RODBC", "roxygen2", "RSQLite", "rvest", "shiny", "stringi", "survival", "testthat", "tibble", "tidymodels", "tidyr", "tinytex", "waldo", "workflows", "xfun"))
1634086011050:install.packages("learnr")
1634086399921:setwd("~/BILD 5 sandbox")
1635094258600:knitr::opts_chunk$set(echo = TRUE)
1635094258871:inputPanel(
1635094258884:selectInput("n_breaks", label = "Number of bins:",
1635094258896:choices = c(10, 20, 35, 50), selected = 20),
1635094258916:sliderInput("bw_adjust", label = "Bandwidth adjustment:",
1635094258927:min = 0.2, max = 2, value = 1, step = 0.2)
1635094258937:)
1635094761674:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635197339862:1+1
1635197351387:1+1
1635197445510:1+1
1635197463349:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R", echo=TRUE)
1635197482265:1+1
1635198622364:knitr::opts_chunk$set(echo = TRUE)
1635198622497:100:130
1635198627657:1+1
1635198647039:100:130
1635198731826:100:130
1635198747723:5 -
1635198747731:+1
1635198776903:3%5
1635198846430:3 % 5
1635198880408:237+2
1635198891757:239*3
1635198900788:717-6
1635198916649:711/3
1635198942960:1:6
1635198974003:a
1635198979046:a <- 1
1635198983015:a
1635199002049:a*3
1635199018387:a^0
1635199049661:die <- 1:6
1635199054388:die
1635199112728:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635199223349:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635199309591:ls()
1635199333345:die - 1
1635199340608:die / 2
1635199347235:die * die
1635199466420:die %% die
1635199483363:die %*% die
1635199499171:die %o% die
1635199551364:round(3.14, digits=1)
1635199602341:factorial(7)
1635199624213:mean(die)
1635199730710:sample(die, 10, replace=true)
1635199767107:sample(die, 10, replace = TRUE)
1635199772657:sample(die, 10, replace = TRUE)
1635199774315:sample(die, 10, replace = TRUE)
1635199775639:sample(die, 10, replace = TRUE)
1635199796181:sample(die, 10, replace = TRUE)
1635199824712:sample(die, 10)
1635199888976:args(sample)
1635199976970:dice <-  sample(die, 10, replace = TRUE)
1635199982364:dice
1635199991485:sum(dice)
1635200274278:# The numbers in the "dice" object are set and don't change.
1635200274284:my_function <- function() {
1635200274291:die <- 1:6
1635200274297:dice <- sample(die, size = 2, replace = TRUE)
1635200274305:sum(dice)
1635200274310:}
1635200317508:my_function()
1635200331165:my_function()
1635200352310:View(my_function)
1635200357376:View(my_function)
1635200373687:roll <- my_function()
1635200376884:roll
1635200379834:roll
1635200387562:roll
1635200393759:my_function()
1635200658977:roll2 <- function(bones) {
1635200658985:dice <- sample(bones, size = 2, replace = TRUE)
1635200658993:sum(dice)
1635200659000:}
1635200682411:roll2(bones = 1:100)
1635201198533:roll2(bones = 1:6)
1635201218607:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635201313543:roll2 <- function(bones = 1:6) {
1635201313551:dice <- sample(bones, size = 2, replace = TRUE)
1635201313557:sum(dice)
1635201313564:}
1635201319825:roll2
1635201348100:View(roll2)
1635201370433:roll2()
1635202210945:devtools::install_github("gadenbuie/rsthemes")
1635202498786:rsthemes
1635202502266:rsthemes()
1635202568662:installed.packages()
1635202587067:library(ggplot2)
1635202620197:library("ggplot2"")
1635202643411:library("ggplot2")
1635202660264:qplot
1635202795967:x <- c(1, 2, 3.4, -0.8, 24, -20, 34, 6, 8)
1635202818991:y <- x^3
1635202840416:qplot(x, y)
1635202875982:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635203168323:x <- c(1, 2, 3.4, -0.8, 2, -3, 3, 4, 6, 8)
1635203171052:y <- x^2
1635203174576:qplot(x, y)
1635203234039:x <- c(1, 2, 2, 2, 3, 3)
1635203250688:qplot(x, binwidth = 1)
1635203337337:x2 <- c(1,1,1,1,1,2,2,2,2,3,3,4)
1635203356578:qplot(x2, binwidth = 1)
1635203462556:lots <- replicate(1000,my_function() )
1635203500513:qplot(lots, binwidth = 0.5)
1635203569457:?sample
1635203650230:lots <- replicate(10000,my_function() )
1635203667963:qplot(lots, binwidth = 0.5)
1635203715145:my_function
1635206687497:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635207782853:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R", echo=TRUE)
1635207833562:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R", echo=TRUE)
1635207939064:unfairresult <- replicate(10000, unfair_dice())
1635207971485:unfair_dice <- function() {
1635207971493:die <- 1:6
1635207971500:unfair <- sample(die, size = 2, replace = TRUE, prob = "1,1,1,1,1,5")
1635207971507:}
1635207977670:unfairresult <- replicate(10000, unfair_dice())
1635208549710:unfair_dice <- function() {
1635208549720:die <- 1:6
1635208549733:unfair <- sample(die, size = 2, replace = TRUE, prob = c(1,1,1,1,1,5))
1635208549742:}
1635208557317:unfairresult <- replicate(10000, unfair_dice())
1635208623571:qplot(unfairresult, binwidth = 0.5)
1635208660740:unfair_dice <- function() {
1635208660750:die <- 1:6
1635208660758:unfair <- sample(die, size = 1, replace = TRUE, prob = c(1,1,1,1,1,5))
1635208660767:}
1635208664404:unfairresult <- replicate(10000, unfair_dice())
1635208667722:qplot(unfairresult, binwidth = 0.5)
1635208683395:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635208694866:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635208709106:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635208723187:install.packages("ggplot2")
1635208729039:install.packages("ggplot2")
1635208734660:install.packages("ggplot2")
1635209153757:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635209159322:install.packages("ggplot2")
1635209563830:knitr::spin()
1635209675075:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635209678968:install.packages("ggplot2")
1635211629567:install.packages("colorBlindness")
1635211658739:library(colorBlindness)
1635211678177:help(colorBlindness)
1635211691716:??colorBlindness
1635213382005:rstudioapi::convertTheme
1635213416360:rstudioapi::convertTheme()
1635262762383:?::
1635262934043:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635263384701:library(tinyverse)
1635263455648:library(tidyverse)
1635263493218:library(ggplot2)
1635263565761:library(viridisLite)
1635263629700:library(shiny)
1635263635733:library(sessioninfo)
1635263654043:session_info()
1635263890355:library(devtools)
1635263911312:devtools::install_github("gadenbuie/rsthemes")
1635263965714:rsthemes::install_rsthemes()
1635263978268:rsthemes::install_rsthemes(include_base16 = TRUE)
1635264181367:rsthemes::set_theme_light()
1635264233031:rsthemes::set_theme_dark()
1635265102602:install.packages("addinslist")
1635265143208:addinslist:::addinslistAddin()
1635265248275:usethis::edit_r_profile()
1635265495038:options(
1635265495045:rsthemes.theme_light = "ally-light {rsthemes}",
1635265495051:rsthemes.theme_dark = "ally-dark {rsthemes}",
1635265495057:rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635265495063:)
1635266071174:options(
1635266071181:rsthemes.theme_light = "ally-light {rsthemes}",
1635266071187:rsthemes.theme_dark = "base 16 dracula {rsthemes}",
1635266071194:rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635266071200:)
1635266103440:source("~/BILD 5 sandbox/RStudio main files/quick_code.R")
1635266196397:options(
1635266196407:rsthemes.theme_light = "ally-light {rsthemes}",
1635266196415:rsthemes.theme_dark = "base16 Dracula {rsthemes}",
1635266196422:rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635266196432:)
1635266574073:options(
1635266574081:+   rsthemes.theme_light = "Chrome",
1635266574088:+   rsthemes.theme_dark = "Cobalt",
1635266574168:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635266716183:source("~/.Rprofile")
1635266729829:options(
1635266729835:+   rsthemes.theme_light = "ally-light {rsthemes}",
1635266729841:+   rsthemes.theme_dark = "base16 Summerfruit Light {rsthemes}",
1635266729848:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635266762991:options(
1635266762998:+   rsthemes.theme_light = "ally-light {rsthemes}"
1635266763005:+   rsthemes.theme_dark = "base16 Summerfruit Light {rsthemes}"
1635266763012:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635266802344:options(
1635266802352:+   rsthemes.theme_light = "ally-light {rsthemes}",
1635266802359:+   rsthemes.theme_dark = "ally-dark {rsthemes}",
1635266802366:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635266802373:+ )
1635266813404:source("~/.Rprofile")
1635266826708:options(
1635266826716:+   rsthemes.theme_light = "ally-light {rsthemes}",
1635266826723:+   rsthemes.theme_dark = "ally-dark {rsthemes}",
1635266826730:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635266896673:options(
1635266896680:rsthemes.theme_light = "ally-light {rsthemes}",
1635266896687:rsthemes.theme_dark = "ally-dark {rsthemes}",
1635266896694:rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635266896701:)
1635266947079:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635268776530:time <- Sys.timezone()
1635268791268:time <- Sys.time()
1635268810518:time
1635268826206:timez <- Sys.timezone()
1635268829280:timez
1635269991033:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635270080808:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635270111186:cvalue <- c(15:3)
1635270145064:clist <- list(cface, csuit, cvalue)
1635270150129:clist
1635270297499:df <- data.frame(face = c("ace", "two", "six"),
1635270297506:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635270299573:df
1635270387827:typeof(clist)
1635270397993:class(clist)
1635270409910:str(clist)
1635270479225:typeof(df)
1635270479232:class(df)
1635270479239:str(df)
1635270866473:allfaces <- rep(cface, each=4)
1635270897956:?rep
1635270982457:allfaces <- rep(cface,4)
1635271052152:allsuits <- rep(suit, each=13)
1635271058844:allsuits <- rep(csuit, each=13)
1635271107023:allvalues <- rep(cvalue, 4)
1635271178740:deuces.deck <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635271186673:deuces.deck
1635271300675:allsuitvalue <- rep(c(4:1),each=13)
1635271445578:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635271502509:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635271509162:deuces.deck
1635271523428:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635272014834:deck <- read.csv("~/BILD 5 sandbox/Hands_on_programming/deck.csv")
1635272014843:View(deck)
1635272043533:View(deuces.deck)
1635272260811:knitr::opts_chunk$set(echo = TRUE)
1635272260995:#loading a dataset can be done from the environment window or the readr() function
1635272261004:?readr()
1635272315612:library(readr)
1635272319384:library(readxl)
1635272351676:?readr
1635273332308:setwd("~/BILD 5 sandbox/Hands_on_programming")
1635273422157:write.csv(deck, file = "cards.csv", row.names = FALSE)
1635273432067:write.csv(deuces.deck, file = "deuces.deck.csv", row.names = FALSE)
1635273705667:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635278928157:options(
1635278928165:+   rsthemes.theme_light = "ally-light {rsthemes}",
1635278928172:+   rsthemes.theme_dark = "ally-dark {rsthemes}",
1635278928266:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635279027298:rsthemes::set_theme_favorite("ally-dark {rsthemes}")
1635279042255:rsthemes::set_theme_favorite(ally-dark {rsthemes})
1635279052899:rsthemes::set_theme_favorite(ally-dark)
1635279102716:options(
1635279102724:+   rsthemes.theme_light = "a11y-light {rsthemes}",
1635279102732:+   rsthemes.theme_dark = "a11y-dark {rsthemes}",
1635279102739:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}"))
1635279118405:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635279206319:?rsthemes.theme.favorite
1635279212741:?rsthemes
1635279261052:list_rsthemes()
1635279286993:library(tidyverse)
1635279289084:library(ggplot2)
1635279309194:library(rsthemes)
1635279366307:list_rsthemes()
1635279381079:+   rsthemes.theme_favorite = paste("One", c("Light", "Dark"), "{rsthemes}")
1635279772349:deck[1,]
1635280012645:deck[-1:50,]
1635280023112:deck[-1:-50,]
1635280043558:view deck
1635280050089:view(deck)
1635280332248:deck[1, c(TRUE, TRUE, FALSE)]
1635280355942:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635280355949:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635280355956:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635280359541:deck[rows, ]
1635280505925:deck[1, c("face", "suit", "value")]
1635280508990:deck[ , "value"]
1635280648567:deck[1, c("face", "suit", "value")]}
1635280655567:deal <- function(cards) {
1635280655575:deck[1, c("face", "suit", "value")]}
1635280666068:deal
1635280678621:deal()
1635280783612:deck2 <- deck[1:52, ]
1635280838111:random <- sample(1:52, size = 52)
1635280845041:random
1635280881039:deck4 <- deck[random, ]
1635280889472:head(deck4)
1635281316312:shuffle <- function(cards) {
1635281316320:random <- sample(1:52, size = 52)
1635281316328:cards[random, ]
1635281316335:}
1635281328277:shuffle()
1635281350677:shuffle(cards = deck)
1635281384007:View(deuces.deck)
1635281396655:shuffle(deuces.deck)
1635281412012:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635281649016:deck$value
1635281678377:mean(deck$value)
1635281692935:median(deck$value)
1635281877288:View(deck)
1635281900097:deck[value]
1635281912189:deck[[value]]
1635282244713:deck2
1635282317603:vec <- c(0, 0, 0, 0, 0, 0)
1635282331701:vec[c(1, 3, 5)] <- c(1, 1, 1)
1635282338693:vec
1635282549636:knitr::opts_chunk$set(echo = TRUE)
1635282549866:deck2$new <- 1:52
1635282693293:deck$new <- NULL
1635282709389:deck2$new <- NULL
1635282820306:View(deck2)
1635282881067:deck2[face("ace"), ]
1635282899266:deck2[face(ace), ]
1635283645260:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635283947647:View(deck)
1635283967699:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635284040271:deck[1,]
1635284040300:deck[-1:-50,]
1635284040492:deck[1, c(TRUE, TRUE, FALSE)]
1635284040512:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284040521:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284040530:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635284040544:deck[rows, ]
1635284040570:deck[1, c("face", "suit", "value")]
1635284040595:deck[ , "value"]
1635284040721:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635284040731:deal <- function(cards) {
1635284040742:deck[1, c("face", "suit", "value")]}
1635284040755:deal()
1635284040789:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635284040806:shuffle <- function(cards) {
1635284040817:+   random <- sample(1:52, size = 52)
1635284040827:+   cards[random, ]}
1635284040839:shuffle()
1635284062561:knitr::opts_chunk$set(echo = TRUE)
1635284062598:1+1
1635284062614:100:130
1635284062689:5 -
1635284062699:+1
1635284062721:237+2
1635284062737:239*3
1635284062753:717-6
1635284062768:711/3
1635284062784:1:6
1635284062810:a <- 1
1635284062824:a
1635284062840:a*3
1635284062857:a^0
1635284062876:round(3.14, digits=1)
1635284062892:factorial(7)
1635284062926:die <- 1:6
1635284062941:die
1635284062967:ls()
1635284063057:die - 1
1635284063084:die / 2
1635284063109:die * die
1635284063134:die %*% die
1635284063153:die %o% die
1635284063258:mean(die)
1635284063274:sample(die, 10, replace = TRUE)
1635284063307:args(sample)
1635284063322:dice <-  sample(die, 10, replace = TRUE)
1635284063335:dice
1635284063367:sum(dice)
1635284063397:my_function <- function() {
1635284063408:die <- 1:6
1635284063417:dice <- sample(die, size = 2, replace = TRUE)
1635284063428:sum(dice)
1635284063438:}
1635284063450:my_function()
1635284063467:my_function()
1635284063508:roll <- my_function()
1635284063524:roll
1635284063539:roll
1635284063555:roll
1635284063572:my_function()
1635284063588:roll2 <- function(bones) {
1635284063597:dice <- sample(bones, size = 2, replace = TRUE)
1635284063606:sum(dice)
1635284063616:}
1635284063628:roll2(bones = 1:100)
1635284063648:roll2 <- function(bones = 1:6) {
1635284063657:dice <- sample(bones, size = 2, replace = TRUE)
1635284063666:sum(dice)
1635284063675:}
1635284063687:roll2
1635284063704:roll2()
1635284063731:library("ggplot2")
1635284063741:x <- c(1, 2, 3.4, -0.8, 2, -3, 3, 4, 6, 8)
1635284063755:y <- x^2
1635284063769:qplot(x, y)
1635284064125:x <- c(1, 2, 2, 2, 3, 3)
1635284064141:qplot(x, binwidth = 1)
1635284064406:x2 <- c(1,1,1,1,1,2,2,2,2,3,3,4)
1635284064425:qplot(x2, binwidth = 1)
1635284064790:lots <- replicate(1000,my_function() )
1635284064849:qplot(lots, binwidth = 0.5)
1635284065133:?sample
1635284065454:lots <- replicate(10000,my_function() )
1635284065590:qplot(lots, binwidth = 0.5)
1635284065961:my_function
1635284065981:unfair_dice <- function() {
1635284065990:die <- 1:6
1635284065999:unfair <- sample(die, size = 1, replace = TRUE, prob = c(1,1,1,1,1,5))
1635284066008:}
1635284066019:unfairresult <- replicate(10000, unfair_dice())
1635284066184:qplot(unfairresult, binwidth = 0.5)
1635284066551:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635284066564:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635284066575:cvalue <- c(15:3)
1635284066590:clist <- list(cface, csuit, cvalue)
1635284066606:clist
1635284066680:typeof(clist)
1635284066692:class(clist)
1635284066705:str(clist)
1635284066823:df <- data.frame(face = c("ace", "two", "six"),
1635284066832:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635284066848:df
1635284066878:typeof(df)
1635284066894:class(df)
1635284066912:str(df)
1635284067025:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635284067037:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635284067048:cvalue <- c(15:3)
1635284067060:clist <- list(cface, csuit, cvalue)
1635284067081:allfaces <- rep(cface,4)
1635284067093:allsuits <- rep(csuit, each=13)
1635284067105:allvalues <- rep(cvalue, 4)
1635284067124:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635284067148:allsuitvalue <- rep(c(4:1),each=13)
1635284067171:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635284067190:deuces.deck
1635284067259:deck[1,]
1635284067282:deck[-1:-50,]
1635284067306:deck[1, c(TRUE, TRUE, FALSE)]
1635284067329:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284067339:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284067348:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635284067361:deck[rows, ]
1635284067386:deck[1, c("face", "suit", "value")]
1635284067409:deck[ , "value"]
1635284067527:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635284067536:deal <- function(cards) {
1635284067545:deck[1, c("face", "suit", "value")]}
1635284067556:deal()
1635284067590:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635284067606:shuffle <- function(cards) {
1635284067615:+   random <- sample(1:52, size = 52)
1635284067627:+   cards[random, ]}
1635284067639:shuffle()
1635284136814:deck[1,]
1635284136842:deck[-1:-50,]
1635284136869:deck[1, c(TRUE, TRUE, FALSE)]
1635284136896:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284136905:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284136915:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635284136929:deck[rows, ]
1635284136955:deck[1, c("face", "suit", "value")]
1635284136983:deck[ , "value"]
1635284137106:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635284137117:deal <- function(cards) {
1635284137126:deck[1, c("face", "suit", "value")]}
1635284137137:deal()
1635284137171:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635284137188:shuffle <- function(cards) {
1635284137197:+   random <- sample(1:52, size = 52)
1635284137207:+   cards[random, ]}
1635284137226:shuffle()
1635284171206:deck[1,]
1635284171231:deck[-1:-50,]
1635284171256:deck[1, c(TRUE, TRUE, FALSE)]
1635284171282:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284171292:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635284171302:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635284171314:deck[rows, ]
1635284171337:deck[1, c("face", "suit", "value")]
1635284171361:deck[ , "value"]
1635284171483:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635284171493:deal <- function(cards) {
1635284171503:deck[1, c("face", "suit", "value")]}
1635284171515:deal()
1635284171549:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635284171566:shuffle <- function(cards) {random <- sample(1:52, size = 52)
1635284171576:+   cards[random, ]}
1635284171595:shuffle()
1635284210121:View(shuffle)
1635284227899:shuffle(deck2)
1635284241102:shuffle(cards = deck2)
1635284319986:shuffle <- function(cards) {
1635284319997:+   random <- sample(1:52, size = 52)
1635284320004:+   cards[random, ]}
1635284320011:shuffle()
1635284524293:random <- sample(1:52, size = 52)
1635284526240:random
1635284529789:random
1635284713843:unfair_dice()
1635284801576:unfair_dice(1)
1635284841479:unfairresult <- replicate(10000, unfair_dice())
1635284848115:unfairresult
1635285041564:shuffle <- function(cards) {
1635285041572:random <- sample(cards, size = 52)
1635285041581:+   cards[random, ]}
1635285065773:shuffle(deck2)
1635285180856:shuffle <- function(cards) {
1635285180865:random <- sample(1:52, size = 52)
1635285180873:+   cards[random, ]}
1635285191981:shuffle(deck2)
1635285216523:shuffle(cards = deck2)
1635285220570:shuffle(cards = deck)
1635285298326:shuffle <- function(cards) {
1635285298334:rando <- sample(1:52, size = 52)
1635285298342:+   cards[rando, ]}
1635285320297:shuffle()
1635285327168:shuffle(deck2)
1635285359630:shuffle <- function(cards) {
1635285359639:random <- sample(1:52, size = 52)
1635285359646:cards[random, ]
1635285359654:}
1635285398328:deck8 <- shuffle (deck)
1635285570162:deck9 <- shuffle(deck2)
1635285685280:knitr::opts_chunk$set(echo = TRUE)
1635285685587:1+1
1635285685602:100:130
1635285685673:5 -
1635285685682:+1
1635285685701:237+2
1635285685716:239*3
1635285685731:717-6
1635285685744:711/3
1635285685759:1:6
1635285685782:a <- 1
1635285685794:a
1635285685809:a*3
1635285685822:a^0
1635285685838:round(3.14, digits=1)
1635285685853:factorial(7)
1635285697758:knitr::opts_chunk$set(echo = TRUE)
1635285697791:1+1
1635285697806:100:130
1635285697880:5 -
1635285697889:+1
1635285697906:237+2
1635285697920:239*3
1635285697933:717-6
1635285697946:711/3
1635285697958:1:6
1635285697979:a <- 1
1635285697990:a
1635285698003:a*3
1635285698018:a^0
1635285698034:round(3.14, digits=1)
1635285698049:factorial(7)
1635285698075:die <- 1:6
1635285698087:die
1635285698111:ls()
1635285698202:die - 1
1635285698224:die / 2
1635285698248:die * die
1635285698268:die %*% die
1635285698284:die %o% die
1635285698375:mean(die)
1635285698388:sample(die, 10, replace = TRUE)
1635285698418:args(sample)
1635285698430:dice <-  sample(die, 10, replace = TRUE)
1635285698443:dice
1635285698472:sum(dice)
1635285710514:knitr::opts_chunk$set(echo = TRUE)
1635285710545:1+1
1635285710561:100:130
1635285710636:5 -
1635285710646:+1
1635285710665:237+2
1635285710679:239*3
1635285710693:717-6
1635285710707:711/3
1635285710722:1:6
1635285710746:a <- 1
1635285710758:a
1635285710773:a*3
1635285710788:a^0
1635285710803:round(3.14, digits=1)
1635285710818:factorial(7)
1635285710850:die <- 1:6
1635285710865:die
1635285710893:ls()
1635285710993:die - 1
1635285711019:die / 2
1635285711046:die * die
1635285711076:die %*% die
1635285711096:die %o% die
1635285711208:mean(die)
1635285711227:sample(die, 10, replace = TRUE)
1635285711263:args(sample)
1635285711278:dice <-  sample(die, 10, replace = TRUE)
1635285711293:dice
1635285711328:sum(dice)
1635285711357:my_function <- function() {
1635285711367:die <- 1:6
1635285711376:dice <- sample(die, size = 2, replace = TRUE)
1635285711386:sum(dice)
1635285711396:}
1635285711407:my_function()
1635285711424:my_function()
1635285711447:roll <- my_function()
1635285711460:roll
1635285711477:roll
1635285711493:roll
1635285711523:my_function()
1635285711540:roll2 <- function(bones) {
1635285711551:dice <- sample(bones, size = 2, replace = TRUE)
1635285711565:sum(dice)
1635285711575:}
1635285711586:roll2(bones = 1:100)
1635285711612:roll2 <- function(bones = 1:6) {
1635285711624:dice <- sample(bones, size = 2, replace = TRUE)
1635285711636:sum(dice)
1635285711649:}
1635285711661:roll2
1635285711685:roll2()
1635285728885:library("ggplot2")
1635285729846:x <- c(1, 2, 3.4, -0.8, 2, -3, 3, 4, 6, 8)
1635285729859:y <- x^2
1635285729886:qplot(x, y)
1635285730141:x <- c(1, 2, 2, 2, 3, 3)
1635285730159:qplot(x, binwidth = 1)
1635285730486:x2 <- c(1,1,1,1,1,2,2,2,2,3,3,4)
1635285730503:qplot(x2, binwidth = 1)
1635285730807:lots <- replicate(1000,my_function() )
1635285730836:qplot(lots, binwidth = 0.5)
1635285731052:?sample
1635285731091:lots <- replicate(10000,my_function() )
1635285731357:qplot(lots, binwidth = 0.5)
1635285756853:my_function
1635285756875:unfair_dice <- function() {
1635285756885:die <- 1:6
1635285756895:unfair <- sample(die, size = 1, replace = TRUE, prob = c(1,1,1,1,1,5))
1635285756904:}
1635285756915:unfairresult <- replicate(10000, unfair_dice())
1635285757072:qplot(unfairresult, binwidth = 0.5)
1635285770649:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635285770662:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635285770674:cvalue <- c(15:3)
1635285770688:clist <- list(cface, csuit, cvalue)
1635285770703:clist
1635285770785:typeof(clist)
1635285770800:class(clist)
1635285770816:str(clist)
1635285781595:df <- data.frame(face = c("ace", "two", "six"),
1635285781605:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635285781624:df
1635285781794:typeof(df)
1635285781810:class(df)
1635285781826:str(df)
1635285781947:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635285781961:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635285781974:cvalue <- c(15:3)
1635285781988:clist <- list(cface, csuit, cvalue)
1635285782013:allfaces <- rep(cface,4)
1635285782027:allsuits <- rep(csuit, each=13)
1635285782040:allvalues <- rep(cvalue, 4)
1635285782061:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635285782089:allsuitvalue <- rep(c(4:1),each=13)
1635285782111:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635285782132:deuces.deck
1635285818414:deck
1635285818443:deck[1,]
1635285818471:deck[-1:-50,]
1635285818495:deck[1, c(TRUE, TRUE, FALSE)]
1635285818520:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285818529:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285818540:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635285818554:deck[rows, ]
1635285818578:deck[1, c("face", "suit", "value")]
1635285818603:deck[ , "value"]
1635285818734:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635285818748:deal <- function(cards) {
1635285818758:deck[1, c("face", "suit", "value")]}
1635285818772:deal()
1635285818804:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635285818819:shuffle <- function(cards) {
1635285818827:random <- sample(1:52, size = 52)
1635285818836:cards[random, ]
1635285818844:}
1635285818861:shuffle()
1635285851157:deck
1635285851184:deck[1,]
1635285851207:deck[-1:-50,]
1635285851231:deck[1, c(TRUE, TRUE, FALSE)]
1635285851254:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285851263:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285851272:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635285851285:deck[rows, ]
1635285851309:deck[1, c("face", "suit", "value")]
1635285851334:deck[ , "value"]
1635285851450:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635285851460:deal <- function(cards) {
1635285851469:deck[1, c("face", "suit", "value")]}
1635285851480:deal()
1635285851513:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635285851529:shuffle()
1635285865674:deck
1635285865700:deck[1,]
1635285865725:deck[-1:-50,]
1635285865756:deck[1, c(TRUE, TRUE, FALSE)]
1635285865780:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285865789:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635285865798:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635285865811:deck[rows, ]
1635285865835:deck[1, c("face", "suit", "value")]
1635285865859:deck[ , "value"]
1635285865974:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635285865983:deal <- function(cards) {
1635285865993:deck[1, c("face", "suit", "value")]}
1635285866003:deal()
1635285866034:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635285866051:shuffle(cards = deck)
1635285866101:shuffle(deuces.deck)
1635285879076:vec <- c(0, 0, 0, 0, 0, 0)
1635285879094:vec[c(1, 3, 5)] <- c(1, 1, 1)
1635285879109:vec
1635285879141:deck2$new <- 1:52
1635285879152:deck2$new <- NULL
1635285898114:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635286604640:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R", echo=TRUE)
1635286628369:knitr::opts_chunk$set(echo = TRUE)
1635286628635:1+1
1635286628653:100:130
1635286628723:5 -
1635286628731:+1
1635286628749:237+2
1635286628764:239*3
1635286628778:717-6
1635286628793:711/3
1635286628807:1:6
1635286628829:a <- 1
1635286628840:a
1635286628863:a*3
1635286628878:a^0
1635286628893:round(3.14, digits=1)
1635286628908:factorial(7)
1635286628953:die <- 1:6
1635286628967:die
1635286628989:ls()
1635286629024:die - 1
1635286629046:die / 2
1635286629069:die * die
1635286629092:die %*% die
1635286629109:die %o% die
1635286629200:mean(die)
1635286629214:sample(die, 10, replace = TRUE)
1635286629243:args(sample)
1635286629255:dice <-  sample(die, 10, replace = TRUE)
1635286629268:dice
1635286629299:sum(dice)
1635286629346:my_function <- function() {
1635286629358:die <- 1:6
1635286629367:dice <- sample(die, size = 2, replace = TRUE)
1635286629376:sum(dice)
1635286629386:}
1635286629397:my_function()
1635286629412:my_function()
1635286629434:roll <- my_function()
1635286629447:roll
1635286629463:roll
1635286629479:roll
1635286629493:my_function()
1635286629508:roll2 <- function(bones) {
1635286629517:dice <- sample(bones, size = 2, replace = TRUE)
1635286629527:sum(dice)
1635286629536:}
1635286629547:roll2(bones = 1:100)
1635286629566:roll2 <- function(bones = 1:6) {
1635286629575:dice <- sample(bones, size = 2, replace = TRUE)
1635286629584:sum(dice)
1635286629594:}
1635286629605:roll2
1635286629621:roll2()
1635286629678:library("ggplot2")
1635286629690:x <- c(1, 2, 3.4, -0.8, 2, -3, 3, 4, 6, 8)
1635286629703:y <- x^2
1635286629716:qplot(x, y)
1635286629878:x <- c(1, 2, 2, 2, 3, 3)
1635286629890:qplot(x, binwidth = 1)
1635286630137:x2 <- c(1,1,1,1,1,2,2,2,2,3,3,4)
1635286630148:qplot(x2, binwidth = 1)
1635286630414:lots <- replicate(1000,my_function() )
1635286630454:qplot(lots, binwidth = 0.5)
1635286630715:?sample
1635286630882:lots <- replicate(10000,my_function() )
1635286631059:qplot(lots, binwidth = 0.5)
1635286631407:my_function
1635286631426:unfair_dice <- function() {
1635286631434:die <- 1:6
1635286631443:unfair <- sample(die, size = 1, replace = TRUE, prob = c(1,1,1,1,1,5))
1635286631451:}
1635286631464:unfairresult <- replicate(10000, unfair_dice())
1635286631634:qplot(unfairresult, binwidth = 0.5)
1635286631885:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635286631899:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635286631912:cvalue <- c(15:3)
1635286631924:clist <- list(cface, csuit, cvalue)
1635286631938:clist
1635286632025:typeof(clist)
1635286632040:class(clist)
1635286632056:str(clist)
1635286632178:df <- data.frame(face = c("ace", "two", "six"),
1635286632188:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635286632203:df
1635286632355:typeof(df)
1635286632370:class(df)
1635286632385:str(df)
1635286632499:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635286632510:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635286632521:cvalue <- c(15:3)
1635286632534:clist <- list(cface, csuit, cvalue)
1635286632557:allfaces <- rep(cface,4)
1635286632570:allsuits <- rep(csuit, each=13)
1635286632582:allvalues <- rep(cvalue, 4)
1635286632601:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635286632625:allsuitvalue <- rep(c(4:1),each=13)
1635286632645:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635286632664:deuces.deck
1635286632710:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635286632723:deal <- function(cards) {
1635286632733:deck[1, c("face", "suit", "value")]}
1635286632743:deal()
1635286675113:setwd("~/BILD 5 sandbox/Hands_on_programming")
1635286814201:deck <- read.csv("~/BILD 5 sandbox/Hands_on_programming/deck.csv")
1635286814209:View(deck)
1635286826840:cards <- read.csv("~/BILD 5 sandbox/Hands_on_programming/cards.csv")
1635286826849:View(cards)
1635287087710:deck <- read_csv("~deck.csv)
1635287139409:deck <- read_csv("~/deck.csv")
1635287157385:deck <- read_csv("~deck.csv")
1635287787071:setwd("~/BILD 5 sandbox/Hands_on_programming")
1635287909442:library(rmarkdown)
1635287923698:library(tidyverse)
1635287925838:library(ggplot2)
1635287925846:library(rsthemes)
1635287925854:library(rmarkdown)
1635289028666:knitr::opts_chunk$set(echo = TRUE)
1635289028676:knitr::opts_chunk$set(eval = TRUE)
1635289028686:knitr::opts_chunk$set(error = TRUE)
1635289028726:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635289028740:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635289028757:cvalue <- c(15:3)
1635289028774:clist <- list(cface, csuit, cvalue)
1635289028792:clist
1635289028880:typeof(clist)
1635289028897:class(clist)
1635289028914:str(clist)
1635289029076:df <- data.frame(face = c("ace", "two", "six"),
1635289029086:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635289029105:df
1635289029129:typeof(df)
1635289029144:class(df)
1635289029158:str(df)
1635289029260:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635289029273:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635289029286:cvalue <- c(15:3)
1635289029300:clist <- list(cface, csuit, cvalue)
1635289029326:allfaces <- rep(cface,4)
1635289029341:allsuits <- rep(csuit, each=13)
1635289029354:allvalues <- rep(cvalue, 4)
1635289029374:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635289029402:allsuitvalue <- rep(c(4:1),each=13)
1635289029422:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635289029441:deuces.deck
1635289029475:write.csv(deck, file = "cards.csv", row.names = FALSE)
1635289029489:write.csv(deuces.deck, file = "deuces.deck.csv", row.names = FALSE)
1635289029536:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635289029547:deal <- function(cards) {
1635289029558:deck[1, c("face", "suit", "value")]}
1635289029571:deal()
1635289029601:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635289029616:shuffle(cards = deck)
1635289029630:shuffle(deuces.deck)
1635289029653:deck$value
1635289029757:mean(deck$value)
1635289029772:median(deck$value)
1635289029801:vec <- c(0, 0, 0, 0, 0, 0)
1635289029815:vec[c(1, 3, 5)] <- c(1, 1, 1)
1635289029830:vec
1635289029860:deck2$new <- 1:52
1635289029877:deck2$new <- NULL
1635289064507:unlink("hands_on part 2_cache", recursive = TRUE)
1635289071517:knit_with_parameters("~/BILD 5 sandbox/Hands_on_programming/hands_on part 2.Rmd")
1635291238802:read.csv(deck)
1635291292077:deck
1635291303563:deuces.d
1635291311406:deuces.deck
1635291316808:df
1635291368469:view(deck)
1635291410817:df <- data.frame(face = c("ace", "two", "six"),
1635291410831:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635291410855:df
1635291410886:typeof(df)
1635291410903:class(df)
1635291410922:str(df)
1635291411046:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635291411061:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635291411074:cvalue <- c(15:3)
1635291411089:clist <- list(cface, csuit, cvalue)
1635291411149:allfaces <- rep(cface,4)
1635291411161:allsuits <- rep(csuit, each=13)
1635291411172:allvalues <- rep(cvalue, 4)
1635291411189:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635291411212:allsuitvalue <- rep(c(4:1),each=13)
1635291411232:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635291411255:deuces.deck
1635291411288:view(deck)
1635291411310:#How to write a .csv
1635291411326:write.csv(deuces.deck, file = "deuces.deck.csv", row.names = FALSE)
1635291472864:source("~/BILD 5 sandbox/Hands_on_programming/hands_on.R")
1635291478621:# Busses are very easy to use, you just need to know which bus to get on, where to get on, and where to get off (and you need to pay your fare). Cars, on the other hand, require much more work: you need to have some type of map or directions (even if the map is in your head), you need to put gas in every now and then, you need to know the rules of the road (have some type of drivers license). The big advantage of the car is that it can take you a bunch of places that the bus does not go and it is quicker for some trips that would require transferring between busses. Using this analogy, programs like SPSS are busses, easy to use for the standard things, but very frustrating if you want to do something that is not already preprogrammed. R is a 4-wheel drive SUV (though environmentally friendly) with a bike on the back, a kayak on top, good walking and running shoes in the passenger seat, and mountain climbing and spelunking gear in the back. R can take you anywhere you want to go if you take time to learn how to use the equipment, but that is going to take longer than learning where the bus stops are in SPSS. Greg Snow
1635291478633:#This book is more programming than stat.
1635291478644:#Use the R and RStudio interfaces
1635291478651:#Run R commands
1635291478658:#Create R objects
1635291478665:#Write your own R functions and scripts
1635291478672:#Load and use R packages
1635291478679:#Generate random samples
1635291478689:#Create quick plots
1635291478697:#Get help when you need it
1635291478709:1+1
1635291478716:100:130
1635291478723:5 -
1635291478730:+1
1635291478741:237+2
1635291478748:239*3
1635291478754:717-6
1635291478761:711/3
1635291478767:1:6
1635291478773:a <- 1
1635291478780:a
1635291478788:a*3
1635291478795:a^0
1635291478804:die <- 1:6
1635291478811:die
1635291478818:ls()
1635291478827:die - 1
1635291478836:die / 2
1635291478843:die * die
1635291478851:die %% die
1635291478857:die %*% die
1635291478864:die %o% die
1635291478873:round(3.14, digits=1)
1635291478881:factorial(7)
1635291478888:mean(die)
1635291478896:sample(die, 10, replace = TRUE)
1635291478904:sample(die, 10, replace = TRUE)
1635291478912:args(sample)
1635291478919:dice <-  sample(die, 10, replace = TRUE)
1635291478926:dice
1635291478932:sum(dice)
1635291478940:# The numbers in the "dice" object are set and don't change.
1635291478947:my_function <- function() {
1635291478955:die <- 1:6
1635291478962:dice <- sample(die, size = 2, replace = TRUE)
1635291478969:sum(dice)
1635291478978:}
1635291478985:my_function()
1635291478992:my_function()
1635291479008:roll <- my_function()
1635291479017:roll
1635291479026:roll
1635291479033:roll
1635291479040:my_function()
1635291479047:roll2 <- function(bones) {
1635291479053:dice <- sample(bones, size = 2, replace = TRUE)
1635291479060:sum(dice)
1635291479068:}
1635291479076:roll2(bones = 1:100)
1635291479090:roll2 <- function(bones = 1:6) {
1635291479096:dice <- sample(bones, size = 2, replace = TRUE)
1635291479102:sum(dice)
1635291479109:}
1635291479116:roll2
1635291479123:roll2()
1635291479134:#making quick plots and getting packages
1635291479146:library("ggplot2")
1635291479153:qplot
1635291479163:x <- c(1, 2, 3.4, -0.8, 2, -3, 3, 4, 6, 8)
1635291479169:y <- x^2
1635291479176:qplot(x, y)
1635291479361:x <- c(1, 2, 2, 2, 3, 3)
1635291479368:qplot(x, binwidth = 1)
1635291479608:x2 <- c(1,1,1,1,1,2,2,2,2,3,3,4)
1635291479614:qplot(x2, binwidth = 1)
1635291479792:lots <- replicate(1000,my_function() )
1635291479808:qplot(lots, binwidth = 0.5)
1635291480067:?sample
1635291480114:lots <- replicate(10000,my_function() )
1635291480436:qplot(lots, binwidth = 0.5)
1635291480746:#now lets make it an unfair die
1635291480759:my_function
1635291480769:unfair_dice <- function() {
1635291480775:die <- 1:6
1635291480781:unfair <- sample(die, size = 1, replace = TRUE, prob = c(1,1,1,1,1,5))
1635291480789:}
1635291480798:unfairresult <- replicate(10000, unfair_dice())
1635291481194:qplot(unfairresult, binwidth = 0.5)
1635291481450:knitr::spin()
1635291481471:##Part 2
1635291481485:#Making vectors and matrices
1635291481501:time <- Sys.time()
1635291481511:time
1635291481526:cface <- c("deuce", "ace", "king", "queen", "jack", "ten", "nine", "eight", "seven", "six", "five", "four", "three")
1635291481534:csuit <- c("spades", "hearts", "clubs", "diamonds")
1635291481544:cvalue <- c(15:3)
1635291481554:clist <- list(cface, csuit, cvalue)
1635291481561:clist
1635291481794:typeof(clist)
1635291481800:class(clist)
1635291481806:str(clist)
1635291481818:#Data Frames
1635291481828:df <- data.frame(face = c("ace", "two", "six"),
1635291481835:suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
1635291481842:df
1635291481855:typeof(df)
1635291481861:class(df)
1635291481867:str(df)
1635291481882:allfaces <- rep(cface,4)
1635291481888:allsuits <- rep(csuit, each=13)
1635291481893:allvalues <- rep(cvalue, 4)
1635291481902:deuces.d <- data.frame(face = allfaces, suit = allsuits, value = allvalues)
1635291481908:deuces.deck
1635291481946:allsuitvalue <- rep(c(4:1),each=13)
1635291481951:deuces.deck <- cbind(deuces.d, allsuitvalue)
1635291481958:deuces.deck
1635291481975:write.csv(deck, file = "cards.csv", row.names = FALSE)
1635291481983:write.csv(deuces.deck, file = "deuces.deck.csv", row.names = FALSE)
1635291482003:read.csv(deck)
1635291482019:deck[,]
1635291482032:deck[1,]
1635291482042:deck[-1:-50,]
1635291482054:deck[1, c(TRUE, TRUE, FALSE)]
1635291482063:rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635291482070:F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
1635291482079:F, F, F, F, F, F, F, F, F, F, F, F, F, F)
1635291482088:deck[rows, ]
1635291482100:deck[1, c("face", "suit", "value")]
1635291482111:deck[ , "value"]
1635291482128:#Exercise 6.1 (Deal a Card) Complete the following code to make a function that returns the first row of a data frame:
1635291482139:deal <- function(cards) {
1635291482146:deck[1, c("face", "suit", "value")]}
1635291482153:deal()
1635291482167:deck2 <- deck[1:52, ]
1635291482174:random <- sample(1:52, size = 52)
1635291482182:random
1635291482190:deck4 <- deck[random, ]
1635291482197:head(deck4)
1635291482213:#Exercise 6.2 (Shuffle a Deck) Use the preceding ideas to write a shuffle function. shuffle should take a data frame and return a shuffled copy of the data frame.
1635291482225:shuffle <- function(cards) {random <- sample(1:52, size = 52)
1635291482232:+   cards[random, ]}
1635291482240:shuffle()
1635291482255:shuffle()
1635291482272:shuffle(cards = deck)
1635291482283:shuffle(deuces.deck)
1635291482298:deck$value
1635291482308:mean(deck$value)
1635291482316:median(deck$value)
1635291482329:vec <- c(0, 0, 0, 0, 0, 0)
1635291482337:vec[c(1, 3, 5)] <- c(1, 1, 1)
1635291482344:vec
1635291482357:deck2$new <- 1:52
1635291482366:deck2$new <- NULL
1635291482380:deck2[face(ace), ]
1635291701723:deck <- read.csv("~/BILD 5 sandbox/Hands_on_programming/deck.csv")
1635291701733:View(deck)
1635291824904:deck <- read_csv(deck, row.names = FALSE)
1635291837960:deck <- read_csv(deck)
1635291872559:deck <- read_csv(~/BILD 5 sandbox/Hands_on_programming/deck.csv)
1635291885485:deck <- read_csv(~BILD 5 sandbox/Hands_on_programming/deck.csv)
1635291898591:deck <- read_csv(~deck.csv)
1635291915624:ls()
1635291924386:deck
1635294258760:library(bslib)
1635294283768:bslib::bootswatch_themes()
1635363644881:load("~/BILD 5 sandbox/.RData")
1635363654637:load("~/BILD 5 sandbox/Hands_on_programming/.RData")
1635363711683:ls()
1635363721807:library(tidyverse)
1635363751744:library(rmarkdown)
1636060023586:knitr::opts_chunk$set(echo = TRUE)
1636060023598:knitr::opts_chunk$set(eval = TRUE)
1636060023608:knitr::opts_chunk$set(error = TRUE)
1636060023779:library(tidyverse)
1636060048033:?stats
1636060065427:library(help = "stats")
1636060125322:?uniform
1636060186227:library(stats)
1636060235302:library(knitr)
1636060517299:install.packages("nycflights13")
1636568176928:load("~/BILD 5 sandbox/.RData")
1636568193258:load("~/BILD 5 sandbox/Hands_on_programming/.RData")
1636568278438:library(tidyverse)
1636568280726:library(rmarkdown)
1637081397280:Library(tidyverse)
1637081405715:library(tidyverse)
1637095141731:library(tidyverse)
1637708379444:setwd("~/BILD 5 sandbox/Term project")
1637708416556:library(data.table)
1637708512109:source("~/BILD 5 sandbox/Term project/term_project_simulate_data.R")
1637708558684:library(rmarkdown)
1637708585729:library(tidyverse)
1637708624348:source("~/BILD 5 sandbox/Term project/term_project_simulate_data.R")
1637708845724:library(readr)
1637708845733:termprojecttest <- read_csv("termprojecttest.csv")
1637708845996:View(termprojecttest)
1637709350283:seed <- seed
1637709456529:termprojecttest
1637709895031:termprojecttest$seed
1637712685035:seedy <- set.seed(seed[1])
1637712837333:df <- termprojecttest
1637712841359:df
1637712986429:df[,"seed"]
1637713156849:set.seed(df[1,"seed"])
1637713174648:?set.seed
1637713427156:x <- (df[1,"seed"])
1637713446719:set.seed(x)
1637713471337:print(x)
1637713656443:?runif
1637713908430:set.seed(27182818)
1637714065041:source("~/BILD 5 sandbox/Term project/term_project_simulate_data.R")
1637714297806:?rbinom
1637714553448:anovabinom2a  <- rbinom(50, 1, 0.5)
1637714561317:anovabinom2a
1637714761368:r <- rnorm(1, 0.5, 0.1)
1637714781545:anovabinom2a  <- rbinom(50, 1, r)
1637714801274:anovabinom2a
1637714831438:anovabinom2b <- rbinom(50, 1, r)
1637714846386:anovabinom2b
1637714860718:anovabinom2b
1637714862709:anovabinom2b
1637714865781:anovabinom2a
1637715209072:df <- data_frame(anovabinom2a, anovabinom2b)
1637715231109:df <- data.frame(anovabinom2a, anovabinom2b)
1637715235597:df
1637720482751:write_csv(df, file = "kdreuther.csv", row.names = FALSE)
1637720506296:?write_csv
1637720580097:write_csv(df, file = "kdreuther.csv")
1637721159788:q <- rnorm(1, 0.5, 0.1)
1637721159798:anovabinom3a  <- rbinom(50, 1, q)
1637721159807:anovabinom3a
1637721159817:anovabinom3b <- rbinom(50, 1, q)
1637721159827:anovabinom3b
1637721159838:anovabinom3c <- rbinom(50, 1, q)
1637721159847:anovabinom3c
1637721184370:q <- rnorm(1, 0.5, 0.1)
1637721184382:anovabinom3a  <- rbinom(33, 1, q)
1637721184393:anovabinom3a
1637721184403:anovabinom3b <- rbinom(33, 1, q)
1637721184413:anovabinom3b
1637721184423:anovabinom3c <- rbinom(33, 1, q)
1637721184433:anovabinom3c
1637722297783:100/3 %% 0
1637722302037:100/3 %% 1
1637722421414:100/3
1637722450794:set.integer(100/3)
1637722477660:is.integer(100/3)
1637722503421:as.integer(100/3)
1637723131817:termprojecttest[14, 3]
1637723140927:termprojecttest[14, 2]
1637723154834:termprojecttest[2, 14]
1637723159934:termprojecttest[3, 14]
1637723174089:termprojecttest[3, 14] <- 100
1637723200201:termprojecttest[3, 15] <- NA
1637723361650:m <- rnorm(1, 100, 10)
1637723361661:sd <- rnorm(1, 10, 1)
1637723361675:cat2doublea <- rnorm(50, m, sd)
1637723361686:cat2doubleb <- rnorm(50, m, sd)
1637723404947:?histogram
1637723414432:??histogram
1637723651185:hist(cat2doublea, col='red')
1637723651613:hist(cat2doubleb, col='blue', add=TRUE)
1637724142902:hist(mean(cat2doublea), col='red')
1637724142938:hist(mean(cat2doubleb), col='blue', add=TRUE)
1637724673596:?bind_rows
1637725160384:?select
1637725259239:ttesta <- select(df3,cat2doublea)
1637725274962:df3 <- data.frame(cat2doublea, cat2doubleb)
1637725281881:ttesta <- select(df3,cat2doublea)
1637725344071:?c()
1637725349341:?c
1637725525382:lev <- rep(c("a", "b"), each=50)
1637725550790:leva <- rep(c("a", each=50)
1637725561700:leva <- rep(c("a", each=50))
1637725575816:leva <- rep(c("a", each=50))
1637725613848:ttestb <- select(df3,cat2doubleb)
1637725647532:levb <- rep(c("b", each=50))
1637725705174:ttesta2 <- cbind(ttesta, leva)
1637725740333:ttestb2 <- cbind(ttestb, levb)
1637725764301:ttesta2
1637725879480:ttesta <- select(df3,cat2doublea)
1637725879495:leva <- rep(c("a",times=50))
1637725879504:ttestb <- select(df3,cat2doubleb)
1637725879517:levb <- rep(c("b",times=50))
1637725879529:ttesta2 <- cbind(ttesta, leva)
1637725879540:ttestb2 <- cbind(ttestb, levb)
1637725879550:ttesta2
1637725896694:leva
1637725926095:leva <- rep(c("a"))
1637725937412:leva
1637725976037:?rep
1637726153402:leva <- rep(c("a"), length.out=50)
1637726156523:leva
1637726180656:ttesta <- select(df3,cat2doublea)
1637726180671:leva <- rep(c("a"), length.out=50)
1637726180683:ttestb <- select(df3,cat2doubleb)
1637726180697:levb <- rep(c("b", length.out=50))
1637726180709:ttesta2 <- cbind(ttesta, leva)
1637726180718:ttestb2 <- cbind(ttestb, levb)
1637726248436:ttest3 <- bind_rows(ttesta, ttestb)
1637726260047:ttest3
1637726308521:ttesta2
1637726322495:ttestb2
1637726332897:levb <- rep(c("b", length.out=50))
1637726340167:ttestb2 <- cbind(ttestb, levb)
1637726396665:?row.names
1637726601034:ttesta <- select(df3,cat2doublea, row.names(FALSE))
1637726601053:leva <- rep(c("a"), length.out=50)
1637726601062:ttestb <- select(df3,cat2doubleb, row.names(FALSE))
1637726601076:levb <- rep(c("b", length.out=50))
1637726601087:ttesta2 <- cbind(ttesta, leva, row.names(FALSE))
1637726601101:ttestb2 <- cbind(ttestb, levb, row.names(FALSE))
1637726601114:ttest3 <- bind_rows(ttesta, ttestb, row.names(FALSE))
1637726601125:ttesta2
1637726601140:ttestb2
1637726601155:ttest3
1637726678262:ttesta <- select(df3,cat2doublea, row.names(FALSE))
1637726678277:leva <- rep(c("a"), length.out=50)
1637726678288:ttestb <- select(df3,cat2doubleb, row.names(FALSE))
1637726678303:levb <- rep(c("b"), length.out=50)
1637726678313:ttesta2 <- cbind(ttesta, leva, row.names(FALSE))
1637726678326:ttestb2 <- cbind(ttestb, levb, row.names(FALSE))
1637726678338:ttest3 <- bind_rows(ttesta, ttestb, row.names(FALSE))
1637726678349:ttesta2
1637726678363:ttestb2
1637726678376:ttest3
1637726694047:levb <- rep(c("b"), length.out=50)
1637726699626:levb
1637726726676:ttesta2
1637726737413:ttestb2
1637726809533:levb <- rep(c("b"), length.out=50)
1637726815338:levb
1637726827514:levb <- rep(c("b"), length.out=50)
1637726832786:levb
1637726855546:ttestb2 <- cbind(ttestb, levb, row.names(FALSE))
1637726890415:?check.names
1637726926388:ttesta2 <- cbind(ttesta, leva)
1637726931994:ttestb2 <- cbind(ttestb, levb)
1637726935855:ttesta2
1637726939587:ttestb2
1637727103270:colnames(ttestb2)[levb] <- "leva"
1637727134229:View(ttestb2)
1637727134351:View(ttestb2)
1637727281684:ttest3 <- bind_rows(ttesta, ttestb)
1637727289926:ttest3
1637727459217:colnames(ttesta2) <- c(value, group)
1637727473456:colnames(ttesta2) <- c("value", "group")
1637727507932:colnames(ttestb2) <- c("value", "group")
1637727511669:ttest3 <- bind_rows(ttesta, ttestb)
1637727519603:ttest3
1637727550164:ttesta2
1637727563410:ttestb2
1637728133589:ttestb2tib <- as_data_frame(ttestb2)
1637728153854:ttesta2tib <- as_data_frame(ttesta2)
1637728181818:ttest3 <- bind_rows(ttesta2tib, ttestb2tib)
1637728184419:ttest3
1637728227025:?t.test
1637728379327:resultttest <- t.test(value ~ group, data = ttest3, var.equal = FALSE)
1637728388734:resultttest
1637728553113:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637728730512:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637728730527:Graph1+
1637728730534:stat_summary(fun.y = mean,
1637728730542:geom = "bar",
1637728730549:color = "black",
1637728730556:fill = "white")+
1637728730563:stat_summary(fun.data = mean_sdl,
1637728730572:geom = "errorbar",
1637728730581:width = .2)
1637728902326:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637728902345:Graph1+
1637728902355:stat_summary(fun.y = sd,
1637728902365:geom = "bar",
1637728902377:color = "black",
1637728902388:fill = "white")
1637728922033:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637728922052:Graph1+
1637728922062:stat_summary(fun.y = mean_sd,
1637728922073:geom = "bar",
1637728922084:color = "black",
1637728922094:fill = "white")
1637728961852:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637728961869:Graph1+
1637728961880:stat_summary(fun.y = mean,
1637728961890:geom = "bar",
1637728961900:color = "black",
1637728961910:fill = "white")+
1637728961919:stat_summary(fun.data = mean_se,
1637728961929:geom = "errorbar",
1637728961938:width = .2)
1637729033162:sdresult <- sd(value ~ group)
1637729121652:sda <- sd(cat2doublea)
1637729121660:sdb <- sd(cat2doubleb)
1637729121668:sda
1637729121678:sdb
1637729302689:m <- rnorm(1, 100, 20)
1637729302699:sd <- rnorm(1, 10, 5)
1637729302710:cat2doublea <- rnorm(50, m, sd)
1637729302720:cat2doubleb <- rnorm(50, m, sd)
1637729302730:sda <- sd(cat2doublea)
1637729302740:sdb <- sd(cat2doubleb)
1637729302750:sda
1637729302760:sdb
1637729302778:df3 <- data.frame(cat2doublea, cat2doubleb)
1637729302789:write_csv(df3, file = "kdreuther3.csv")
1637729302804:#the students will have to make their data tidy
1637729302820:ttesta <- select(df3,cat2doublea, row.names(FALSE))
1637729302835:leva <- rep(c("a"), length.out=50)
1637729302844:ttestb <- select(df3,cat2doubleb, row.names(FALSE))
1637729302859:levb <- rep(c("b"), length.out=50)
1637729302869:ttesta2 <- cbind(ttesta, leva)
1637729302881:colnames(ttesta2) <- c("value", "group")
1637729302892:ttesta2
1637729302906:ttestb2 <- cbind(ttestb, levb)
1637729302916:colnames(ttestb2) <- c("value", "group")
1637729302925:ttestb2tib <- as_data_frame(ttestb2)
1637729302942:ttesta2tib <- as_data_frame(ttesta2)
1637729302958:ttest3 <- bind_rows(ttesta2tib, ttestb2tib)
1637729302968:ttest3
1637729302998:resultttest <- t.test(value ~ group, data = ttest3, var.equal = FALSE)
1637729303011:resultttest
1637729303039:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637729303058:Graph1+
1637729303068:stat_summary(fun.y = mean,
1637729303079:geom = "bar",
1637729303090:color = "black",
1637729303102:fill = "white")+
1637729303112:stat_summary(fun.data = mean_se,
1637729303122:geom = "errorbar",
1637729303129:width = .2)
1637729362587:m <- rnorm(1, 100, 50)
1637729362597:sd <- rnorm(1, 10, 5)
1637729362608:cat2doublea <- rnorm(50, m, sd)
1637729362620:cat2doubleb <- rnorm(50, m, sd)
1637729362632:sda <- sd(cat2doublea)
1637729362641:sdb <- sd(cat2doubleb)
1637729362651:sda
1637729362661:sdb
1637729362676:df3 <- data.frame(cat2doublea, cat2doubleb)
1637729362687:write_csv(df3, file = "kdreuther3.csv")
1637729362704:#the students will have to make their data tidy
1637729362719:ttesta <- select(df3,cat2doublea, row.names(FALSE))
1637729362732:leva <- rep(c("a"), length.out=50)
1637729362740:ttestb <- select(df3,cat2doubleb, row.names(FALSE))
1637729362753:levb <- rep(c("b"), length.out=50)
1637729362762:ttesta2 <- cbind(ttesta, leva)
1637729362772:colnames(ttesta2) <- c("value", "group")
1637729362781:ttesta2
1637729362796:ttestb2 <- cbind(ttestb, levb)
1637729362806:colnames(ttestb2) <- c("value", "group")
1637729362814:ttestb2tib <- as_data_frame(ttestb2)
1637729362830:ttesta2tib <- as_data_frame(ttesta2)
1637729362848:ttest3 <- bind_rows(ttesta2tib, ttestb2tib)
1637729362858:ttest3
1637729362886:resultttest <- t.test(value ~ group, data = ttest3, var.equal = FALSE)
1637729362898:resultttest
1637729362924:Graph1 = ggplot(ttest3, aes(y=value, x=group))
1637729362943:Graph1+
1637729362950:stat_summary(fun.y = mean,
1637729362958:geom = "bar",
1637729362966:color = "black",
1637729362975:fill = "white")+
1637729362985:stat_summary(fun.data = mean_se,
1637729362994:geom = "errorbar",
1637729363003:width = .2)
1637858490455:library(tidyverse)
1638482545880:library(rmarkdown)
1638482546008:library(tidyverse)
1638482548415:library(data.table)
1638482548517:library(readr)
1638482548524:library(magrittr)
1638482570295:termprojecttest <- read_csv("termprojecttest.csv")
1638482570364:View(termprojecttest)
1638482570381:set.seed(27182818)
1638482602852:setwd("~/BILD 5 sandbox/Term project")
1638482611762:termprojecttest <- read_csv("termprojecttest.csv")
1638482612007:View(termprojecttest)
1638565700399:setwd("~/BILD 5 sandbox/Term project")
1638565711422:library(rmarkdown)
1638565711516:library(tidyverse)
1638565713270:library(data.table)
1638565713383:library(readr)
1638565713391:library(magrittr)
1638565801792:library(readr)
1638565801802:all_possible_data_tp <- read_csv("all_possible_data_tp.csv")
1638565801998:View(all_possible_data_tp)
1638565828263:set.seed(27182818)
1638569138565:ggplot2::diamonds
1638569192180:?pryr
1638569216230:install.packages("pryr")
1638569989098:?na.rm
1638570000174:??navbar_html
1638570026174:?max
1640722685643:hello <- "Hello, World"
1640722689952:hello
1640722737910:"Hello, World"
1640723582004:knitr::opts_chunk$set(echo = TRUE)
1640723582016:knitr::opts_chunk$set(eval = TRUE)
1640723582026:knitr::opts_chunk$set(error = TRUE)
1640723582215:```{r}
1640723582236:X<- c(1,3,5,6,7,9)
1640723582293:X
1640723582314:Y<- c(2, 7, 4, 5, 2, 12)
1640723582326:Y
1640723634221:X<- c(1,3,5,6,7,9)
1640723634235:X
1640723634261:Y<- c(2, 7, 4, 5, 2, 12)
1640723634273:Y
1640723652349:Z <- x + y
1640723652444:Z
1640723680754:Z <- X + Y
1640723680777:Z
1640723769315:Z <- cbind(X,Y)
1640723769336:Z
1640723769383:#What happens if you just add X to Y using the + sign?
1640723820885:Z <- bind(X,Y)
1640723820909:Z
1640723820971:#What happens if you just add X to Y using the + sign?
1640723820981:#What happens if you cbind() X and Y?
1640724058524:Z <- c(X,Y)
1640724058555:Z
1640724058594:#What happens if you just add X to Y using the + sign?
1640724058604:#What happens if you cbind() X and Y?
1640724429374:newZ <- c(Z < 6)
1640724490007:newZ <- Z[-1, 2, 37, 9, 10, 11]
1640724503861:newZ <- Z[-1, 2, 3,7, 9, 10, 11]
1640724524800:newZ <- Z[-1 2 3 7 9 10 11]
1640724632383:newZ <- Z[!(x < 6)]
1640724641496:newZ <- Z[!(Z < 6)]
1640724668824:newZ<- Z[!(Z < 6)]
1640724668837:newZ
1640724688520:mean(Z)
1640724709324:meanZ<-mean(Z)
1640724709339:meanZ
1640724723409:lengthX<- length(X)
1640724723421:lengthX
1640985215981:?pi
1640985226850:pi
1640985266829:pi[1:300]
1640985277747:length(pi)
1640985602893:length(a)
1640985609347:a <- 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319255060400927701671139009848824012858361603563707660104710181942955596198946767837449448255379774726847104047534646208046684259069491293313677028989152104752162056966024058038150193511253382430035587640247496473263914199272604269922796782354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955321165344987202755960236480665499119881834797753566369807426542527862551818417574672890977772793800081647060016145249192173217214772350141441973568548161361157352552133475741849468438523323907394143334547762416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383827967976681454100953883786360950680064225125205117392984896084128488626945604241965285022210661186306744278622039194945047123713786960956364371917287467764657573962413890865832645995813390478027590099465764078951269468398352595709825822620522489407726719478268482601476990902640136394437455305068203496252451749399651431429809190659250937221696461515709858387410597885959772975498930161753928468138268683868942774155991855925245953959431049972524680845987273644695848653836736222626099124608051243884390451244136549762780797715691435997700129616089441694868555848406353422072225828488648158456028506016842739452267467678895252138522549954666727823986456596116354886230577456498035593634568174324112515076069479451096596094025228879710893145669136867228748940560101503308617928680920874760917824938589009714909675985261365549781893129784821682998948722658804857564014270477555132379641451523746234364542858444795265867821051141354735739523113427166102135969536231442952484937187110145765403590279934403742007310578539062198387447808478489683321445713868751943506430218453191048481005370614680674919278191197939952061419663428754440643745123718192179998391015919561814675142691239748940907186494231961567945208095146550225231603881930142093762137855956638937787083039069792077346722182562599661501421503068038447734549202605414665925201497442850732518666002132434088190710486331734649651453905796268561005508106658796998163574736384052571459102897064140110971206280439039759515677157700420337869936007230558763176359421873125147120532928191826186125867321579198414848829164470609575270695722091756711672291098169091528017350671274858322287183520935396572512108357915136988209144421006751033467110314126711136990865851639831501970165151168517143765761835155650884909989859982387345528331635507647918535893226185489632132933089857064204675259070915481416549859461637180270981994309924488957571282890592323326097299712084433573265489382391193259746366730583604142813883032038249037589852437441702913276561809377344403070746921120191302033038019762110110044929321516084244485963766983895228684783123552658213144957685726243344189303968642624341077322697802807318915441101044682325271620105265227211166039666557309254711055785376346682065310989652691862056476931257058635662018558100729360659876486117910453348850346113657686753249441668039626579787718556084552965412665408530614344431858676975145661406800700237877659134401712749470420562230538994561314071127000407854733269939081454664645880797270826683063432858785698305235808933065757406795457163775254202114955761581400250126228594130216471550979259230990796547376125517656751357517829666454779174501129961489030463994713296210734043751895735961458901938971311179042978285647503203198691514028708085990480109412147221317947647772622414254854540332157185306142288137585043063321751829798662237172159160771669254748738986654949450114654062843366393790039769265672146385306736096571209180763832716641627488880078692560290228472104031721186082041900042296617119637792133757511495950156604963186294726547364252308177036751590673502350728354056704038674351362222477158915049530984448933309634087807693259939780541934144737744184263129860809988868741326047215695162396586457302163159819319516735381297416772947867242292465436680098067692823828068996400482435403701416314965897940924323789690706977942236250822168895738379862300159377647165122893578601588161755782973523344604281512627203734314653197777416031990665541876397929334419521541341899485444734567383162499341913181480927777103863877343177207545654532207770921201905166096280490926360197598828161332316663652861932668633606273567630354477628035045077723554710585954870279081435624014517180624643626794561275318134078330336254232783944975382437205835311477119926063813346776879695970309833913077109870408591337464144282277263465947047458784778720192771528073176790770715721344473060570073349243693113835049316312840425121925651798069411352801314701304781643788518529092854520116583934196562134914341595625865865570552690496520985803385072242648293972858478316305777756068887644624824685792603953527734803048029005876075825104747091643961362676044925627420420832085661190625454337213153595845068772460290161876679524061634252257719542916299193064553779914037340432875262888963995879475729174642635745525407909145135711136941091193932519107602082520261879853188770584297259167781314969900901921169717372784768472686084900337702424291651300500516832336435038951702989392233451722013812806965011784408745196012122859937162313017114448464090389064495444006198690754851602632750529834918740786680881833851022833450850486082503930213321971551843063545500766828294930413776552793975175461395398468339363830474611996653858153842056853386218672523340283087112328278921250771262946322956398989893582116745627010218356462201349671518819097303811980049734072396103685406643193950979019069963955245300545058068550195673022921913933918568034490398205955100226353536192041994745538593810234395544959778377902374216172711172364343543947822181852862408514006660443325888569867054315470696574745855033232334210730154594051655379068662733379958511562578432298827372319898757141595781119635833005940873068121602876496286744604774649159950549737425626901049037781986835938146574126804925648798556145372347867330390468838343634655379498641927056387293174872332083760112302991136793862708943879936201629515413371424892830722012690147546684765357616477379467520049075715552781965362132392640616013635815590742202020318727760527721900556148425551879253034351398442532234157623361064250639049750086562710953591946589751413103482276930624743536325691607815478181152843667957061108615331504452127473924544945423682886061340841486377670096120715124914043027253860764823634143346235189757664521641376796903149501910857598442391986291642193994907236234646844117394032659184044378051333894525742399508296591228508555821572503107125701266830240292952522011872676756220415420516184163484756516999811614101002996078386909291603028840026910414079288621507842451670908700069928212066041837180653556725253256753286129104248776182582976515795984703562226293486003415872298053498965022629174878820273420922224533985626476691490556284250391275771028402799806636582548892648802545661017296702664076559042909945681506526530537182941270336931378517860904070866711496558343434769338578171138645587367812301458768712660348913909562009939361031029161615288138437909904231747336394804575931493140529763475748119356709110137751721008031559024853090669203767192203322909433467685142214477379393751703443661991040337511173547191855046449026365512816228824462575916333039107225383742182140883508657391771509682887478265699599574490661758344137522397096834080053559849175417381883999446974867626551658276584835884531427756879002909517028352971634456212964043523117600665101241200659755851276178583829204197484423608007193045761893234922927965019875187212726750798125547095890455635792122103334669749923563025494780249011419521238281530911407907386025152274299581807247162591668545133312394804947079119153267343028244186041426363954800044800267049624820179289647669758318327131425170296923488962766844032326092752496035799646925650493681836090032380929345958897069536534940603402166544375589004563288225054525564056448246515187547119621844396582533754388569094113031509526179378002974120766514793942590298969594699556576121865619673378623625612521632086286922210327488921865436480229678070576561514463204692790682120738837781423356282360896320806822246801224826117718589638140918390367367222088832151375560037279839400415297002878307667094447456013455641725437090697939612257142989467154357846878861444581231459357198492252847160504922124247014121478057345510500801908699603302763478708108175450119307141223390866393833952942578690507643100638351983438934159613185434754649556978103829309716465143840700707360411237359984345225161050702705623526601276484830840761183013052793205427462865403603674532865105706587488225698157936789766974220575059683440869735020141020672358502007245225632651341055924019027421624843914035998953539459094407046912091409387001264560016237428802109276457931065792295524988727584610126483699989225695968815920560010165525637567856672279661988578279484885583439751874454551296563443480396642055798293680435220277098429423253302257634180703947699415979159453006975214829336655566156787364005366656416547321704390352132954352916941459904160875320186837937023488868947915107163785290234529244077365949563051007421087142613497459561513849871375704710178795731042296906667021449863746459528082436944578977233004876476524133907592043401963403911473202338071509522201068256342747164602433544005152126693249341967397704159568375355516673027390074972973635496453328886984406119649616277344951827369558822075735517665158985519098666539354948106887320685990754079234240230092590070173196036225475647894064754834664776041146323390565134330684495397907090302346046147096169688688501408347040546074295869913829668246818571031887906528703665083243197440477185567893482308943106828702722809736248093996270607472645539925399442808113736943388729406307926159599546262462970706259484556903471197299640908941805953439325123623550813494900436427852713831591256898929519642728757394691427253436694153236100453730488198551706594121735246258954873016760029886592578662856124966552353382942878542534048308330701653722856355915253478445981831341129001999205981352205117336585640782648494276441137639386692480311836445369858917544264739988228462184490087776977631279572267265556259628254276531830013407092233436577916012809317940171859859993384923549564005709955856113498025249906698423301735035804408116855265311709957089942732870925848789443646005041089226691783525870785951298344172953519537885534573742608590290817651557803905946408735061232261120093731080485485263572282576820341605048466277504500312620080079980492548534694146977516493270950493463938243222718851597405470214828971117779237612257887347718819682546298126868581705074027255026332904497627789442362167411918626943965067151577958675648239939176042601763387045499017614364120469218237076488783419689686118155815873606293860381017121585527266830082383404656475880405138080163363887421637140643549556186896411228214075330265510042410489678352858829024367090488711819090949453314421828766181031007354770549815968077200947469613436092861484941785017180779306810854690009445899527942439813921350558642219648349151263901280383200109773868066287792397180146134324457264009737425700735921003154150893679300816998053652027600727749674584002836240534603726341655425902760183484030681138185510597970566400750942608788573579603732451414678670368809880609716425849759513806930944940151542222194329130217391253835591503100333032511174915696917450271494331515588540392216409722910112903552181576282328318234254832611191280092825256190205263016391147724733148573910777587442538761174657867116941477642144111126358355387136101102326798775641024682403226483464176636980663785768134920453022408197278564719839630878154322116691224641591177673225326433568614618654522268126887268445968442416107854016768142080885028005414361314623082102594173756238994207571362751674573189189456283525704413354375857534269869947254703165661399199968262824727064133622217892390317608542894373393561889165125042440400895271983787386480584726895462438823437517885201439560057104811949884239060613695734231559079670346149143447886360410318235073650277859089757827273130504889398900992391350337325085598265586708924261242947367019390772713070686917092646254842324074855036608013604668951184009366860954632500214585293095000090715105823626729326453738210493872499669933942468551648326113414611068026744663733437534076429402668297386522093570162638464852851490362932019919968828517183953669134522244470804592396602817156551565666111359823112250628905854914509715755390024393153519090210711945730024388017661503527086260253788179751947806101371500448991721002220133501310601639154158957803711779277522597874289191791552241718958536168059474123419339842021874564925644346239253195313510331147639491199507285843065836193536932969928983791494193940608572486396883690326556436421664425760791471086998431573374964883529276932822076294728238153740996154559879825989109371712621828302584811238901196822142945766758071865380650648702613389282299497257453033283896381843944770779402284359883410035838542389735424395647555684095224844554139239410001620769363684677641301781965937997155746854194633489374843912974239143365936041003523437770658886778113949861647874714079326385873862473288964564359877466763847946650407411182565837887845485814896296127399841344272608606187245545236064315371011274680977870446409475828034876975894832824123929296058294861919667091895808983320121031843034012849511620353428014412761728583024355983003204202451207287253558119584014918096925339507577840006746552603144616705082768277222353419110263416315714740612385042584598841990761128725805911393568960143166828317632356732541707342081733223046298799280490851409479036887868789493054695570307261900950207643349335910602454508645362893545686295853131533718386826561786227363716975774183023986006591481616404944965011732131389574706208847480236537103115089842799275442685327797431139514357417221975979935968525228574526379628961269157235798662057340837576687388426640599099350500081337543245463596750484423528487470144354541957625847356421619813407346854111766883118654489377697956651727966232671481033864391375186594673002443450054499539974237232871249483470604406347160632583064982979551010954183623503030945309733583446283947630477564501500850757894954893139394489921612552559770143685894358587752637962559708167764380012543650237141278346792610199558522471722017772370041780841942394872540680155603599839054898572354674564239058585021671903139526294455439131663134530893906204678438778505423939052473136201294769187497519101147231528932677253391814660730008902776896311481090220972452075916729700785058071718638105496797310016787085069420709223290807038326345345203802786099055690013413718236837099194951648960075504934126787643674638490206396401976668559233565463913836318574569814719621084108096188460545603903845534372914144651347494078488442377217515433426030669883176833100113310869042193903108014378433415137092435301367763108491351615642269847507430329716746964066653152703532546711266752246055119958183196376370761799191920357958200759560530234626775794393630746305690108011494271410093913691381072581378135789400559950018354251184172136055727522103526803735726527922417373605751127887218190844900617801388971077082293100279766593583875890939568814856026322439372656247277603789081445883785501970284377936240782505270487581647032458129087839523245323789602984166922548964971560698119218658492677040395648127810217991321741630581055459880130048456299765112124153637451500563507012781592671424134210330156616535602473380784302865525722275304999883701534879300806260180962381516136690334111138653851091936739383522934588832255088706450753947395204396807906708680644509698654880168287434378612645381583428075306184548590379821799459968115441974253634439960290251001588827216474500682070419376158454712318346007262933955054823955713725684023226821301247679452264482091023564775272308208106351889915269288910845557112660396503439789627825001611015323516051965590421184494990778999200732947690586857787872098290135295661397888486050978608595701773129815531495168146717695976099421003618355913877781769845875810446628399880600616229848616935337386578773598336161338413385368421197893890018529569196780455448285848370117096721253533875862158231013310387766827211572694951817958975469399264219791552338576623167627547570354699414892904130186386119439196283887054367774322427680913236544948536676800000106526248547305586159899914017076983854831887501429389089950685453076511680333732226517566220752695179144225280816517166776672793035485154204023817460892328391703275425750867655117859395002793389592057668278967764453184040418554010435134838953120132637836928358082719378312654961745997056745071833206503455664403449045362756001125018433560736122276594927839370647842645676338818807565612168960504161139039063960162022153684941092605387688714837989559999112099164646441191856827700457424343402167227644558933012778158686952506949936461017568506016714535431581480105458860564550133203758645485840324029871709348091055621167154684847780394475697980426318099175642280987399876697323769573701580806822904599212366168902596273043067931653114940176473769387351409336183321614280214976339918983548487562529875242387307755955595546519639440182184099841248982623673771467226061633643296406335728107078875816404381485018841143188598827694490119321296827158884133869434682859006664080631407775772570563072940049294030242049841656547973670548558044586572022763784046682337985282710578431975354179501134727362577408021347682604502285157979579764746702284099956160156910890384582450267926594205550395879229818526480070683765041836562094555434613513415257006597488191634135955671964965403218727160264859304903978748958906612725079482827693895352175362185079629778514618843271922322381015874445052866523802253284389137527384589238442253547265309817157844783421582232702069028723233005386216347988509469547200479523112015043293226628272763217790884008786148022147537657810581970222630971749507212724847947816957296142365859578209083073323356034846531873029302665964501371837542889755797144992465403868179921389346924474198509733462679332107268687076806263991936196504409954216762784091466985692571507431574079380532392523947755744159184582156251819215523370960748332923492103451462643744980559610330799414534778457469999212859999939961228161521931488876938802228108300198601654941654261696858678837260958774567618250727599295089318052187292461086763995891614585505839727420980909781729323930106766386824040111304024700735085782872462713494636853181546969046696869392547251941399291465242385776255004748529547681479546700705034799958886769501612497228204030399546327883069597624936151010243655535223069061294938859901573466102371223547891129254769617600504797492806072126803922691102777226102544149221576504508120677173571202718024296810620377657883716690910941807448781404907551782038565390991047759414132154328440625030180275716965082096427348414695726397884256008453121406593580904127113592004197598513625479616063228873618136737324450607924411763997597461938358457491598809766744709300654634242346063423747466608043170126005205592849369594143408146852981505394717890045183575515412522359059068726487863575254191128887737176637486027660634960353679470269232297186832771739323619200777452212624751869833495151019864269887847171939664976907082521742336566272592844062043021411371992278526998469884770232382384005565551788908766136013047709843861168705231055314916251728373272867600724817298763756981633541507460883866364069347043720668865127568826614973078865701568501691864748854167915459650723428773069985371390430026653078398776385032381821553559732353068604301067576083890862704984188859513809103042359578249514398859011318583584066747237029714978508414585308578133915627076035639076394731145549583226694570249413983163433237897595568085683629725386791327505554252449194358912840504522695381217913191451350099384631177401797151228378546011603595540286440590249646693070776905548102885020808580087811577381719174177601733073855475800605601433774329901272867725304318251975791679296996504146070664571258883469797964293162296552016879730003564630457930884032748077181155533090988702550520768046303460865816539487695196004408482065967379473168086415645650530049881616490578831154345485052660069823093157776500378070466126470602145750579327096204782561524714591896522360839664562410519551052235723973951288181640597859142791481654263289200428160913693777372229998332708208296995573772737566761552711392258805520189887620114168005468736558063347160373429170390798639652296131280178267971728982293607028806908776866059325274637840539769184808204102194471971386925608416245112398062011318454124478205011079876071715568315407886543904121087303240201068534194723047666672174986986854707678120512473679247919315085644477537985379973223445612278584329684664751333657369238720146472367942787004250325558992688434959287612400755875694641370562514001179713316620715371543600687647731867558714878398908107429530941060596944315847753970094398839491443235366853920994687964506653398573888786614762944341401049888993160051207678103588611660202961193639682134960750111649832785635316145168457695687109002999769841263266502347716728657378579085746646077228341540311441529418804782543876177079043000156698677679576090996693607559496515273634981189641304331166277471233881740603731743970540670310967676574869535878967003192586625941051053358438465602339179674926784476370847497833365557900738419147319886271352595462518160434225372996286326749682405806029642114638643686422472488728343417044157348248183330164056695966886676956349141632842641497453334999948000266998758881593507357815195889900539512085351035726137364034367534714104836017546488300407846416745216737190483109676711344349481926268111073994825060739495073503169019731852119552635632584339099822498624067031076831844660729124874754031617969941139738776589986855417031884778867592902607004321266617919223520938227878880988633599116081923535557046463491132085918979613279131975649097600013996234445535014346426860464495862476909434704829329414041114654092398834443515913320107739441118407410768498106634724104823935827401944935665161088463125678529776973468430306146241803585293315973458303845541033701091676776374276210213701354854450926307190114731848574923318167207213727935567952844392548156091372812840633303937356242001604566455741458816605216660873874804724339121295587776390696903707882852775389405246075849623157436917113176134783882719416860662572103685132156647800147675231039357860689611125996028183930954870905907386135191459181951029732787557104972901148717189718004696169777001791391961379141716270701895846921434369676292745910994006008498356842520191559370370101104974733949387788598941743303178534870760322198297057975119144051099423588303454635349234982688362404332726741554030161950568065418093940998202060999414021689090070821330723089662119775530665918814119157783627292746156185710372172471009521423696483086410259288745799932237495519122195190342445230753513380685680735446499512720317448719540397610730806026990625807602029273145525207807991418429063884437349968145827337207266391767020118300464819000241308350884658415214899127610651374153943565721139032857491876909441370209051703148777346165287984823533829726013611098451484182380812054099612527458088109948697221612852489742555551607637167505489617301680961380381191436114399210638005083214098760459930932485102516829446726066613815174571255975495358023998314698220361338082849935670557552471290274539776214049318201465800802156653606776550878380430413431059180460680083459113664083488740800574127258670479225831912741573908091438313845642415094084913391809684025116399193685322555733896695374902662092326131885589158083245557194845387562878612885900410600607374650140262782402734696252821717494158233174923968353013617865367376064216677813773995100658952887742766263684183068019080460984980946976366733566228291513235278880615776827815958866918023894033307644191240341202231636857786035727694154177882643523813190502808701857504704631293335375728538660588890458311145077394293520199432197117164223500564404297989208159430716701985746927384865383343614579463417592257389858800169801475742054299580124295810545651083104629728293758416116253256251657249807849209989799062003593650993472158296517413579849104711166079158743698654122234834188772292944633517865385673196255985202607294767407261676714557364981210567771689348491766077170527718760119990814411305864557791052568430481144026193840232247093924980293355073184589035539713308844617410795916251171486487446861124760542867343670904667846867027409188101424971114965781772427934707021668829561087779440504843752844337510882826477197854000650970403302186255614733211777117441335028160884035178145254196432030957601869464908868154528562134698835544456024955666843660292219512483091060537720198021831010327041783866544718126039719068846237085751808003532704718565949947612424811099928867915896904956394762460842406593094862150769031498702067353384834955083636601784877106080980426924713241000946401437360326564518456679245666955100150229833079849607994988249706172367449361226222961790814311414660941234159359309585407913908720832273354957208075716517187659944985693795623875551617575438091780528029464200447215396280746360211329425591600257073562812638733106005891065245708024474937543184149401482119996276453106800663118382376163966318093144467129861552759820145141027560068929750246304017351489194576360789352855505317331416457050499644389093630843874484783961684051845273288403234520247056851646571647713932377551729479512613239822960239454857975458651745878771331813875295980941217422730035229650808917770506825924882232215493804837145478164721397682096332050830564792048208592047549985732038887639160199524091893894557676874973085695595801065952650303626615975066222508406742889826590751063756356996821151094966974458054728869363102036782325018232370845979011154847208761821247781326633041207621658731297081123075815982124863980721240786887811450165582513617890307086087019897588980745664395515741536319319198107057533663373803827215279884935039748001589051942087971130805123393322190346624991716915094854140187106035460379464337900589095772118080446574396280618671786101715674096766208029576657705129120990794430463289294730615951043090222143937184956063405618934251305726829146578329334052463502892917547087256484260034962961165413823007731332729830500160256724014185152041890701154288579920812198449315699905918201181973350012618772803681248199587707020753240636125931343859554254778196114293516356122349666152261473539967405158499860355295332924575238881013620234762466905581643896786309762736550472434864307121849437348530060638764456627218666170123812771562137974614986132874411771455244470899714452288566294244023018479120547849857452163469644897389206240194351831008828348024924908540307786387516591130287395878709810077271827187452901397283661484214287170553179654307650453432460053636147261818096997693348626407743519992868632383508875668359509726557481543194019557685043724800102041374983187225967738715495839971844490727914196584593008394263702087563539821696205532480321226749891140267852859967340524203109179789990571882194939132075343170798002373659098537552023891164346718558290685371189795262623449248339249634244971465684659124891855662958932990903523923333364743520370770101084388003290759834217018554228386161721041760301164591878053936744747205998502358289183369292233732399948043710841965947316265482574809948250999183300697656936715968936449334886474421350084070066088359723503953234017958255703601693699098867113210979889707051728075585519126993067309925070407024556850778679069476612629808225163313639952117098452809263037592242674257559989289278370474445218936320348941552104459726188380030067761793138139916205806270165102445886924764924689192461212531027573139084047000714356136231699237169484813255420091453041037135453296620639210547982439212517254013231490274058589206321758949434548906846399313757091034633271415316223280552297297953801880162859073572955416278867649827418616421878988574107164906919185116281528548679417363890665388576422915834250067361245384916067413734017357277995634104332688356950781493137800736235418007061918026732855119194267609122103598746924117283749312616339500123959924050845437569850795704622266461900010350049018303415354584283376437811198855631877779253720116671853954183598443830520376281944076159410682071697030228515225057312609304689842343315273213136121658280807521263154773060442377475350595228717440266638914881717308643611138906942027908814311944879941715404210341219084709408025402393294294549387864023051292711909751353600092197110541209668311151632870542302847007312065803262641711616595761327235156666253667271899853419989523688483099930275741991646384142707798870887422927705389122717248632202889842512528721782603050099451082478357290569198855546788607946280537122704246654319214528176074148240382783582971930101788834567416781139895475044833931468963076339665722672704339321674542182455706252479721997866854279897799233957905758189062252547358220523642485078340711014498047872669199018643882293230538231855973286978092225352959101734140733488476100556401824239219269506208318381454698392366461363989101210217709597670490830508185470419466437131229969235889538493013635657618610606222870559942337163102127845744646398973818856674626087948201864748767272722206267646533809980196688368099415907577685263986514625333631245053640261056960551318381317426118442018908885319635698696279503673842431301133175330532980201668881748134298868158557781034323175306478498321062971842518438553442762012823457071698853051832617964117857960888815032960229070561447622091509473903594664691623539680920139457817589108893199211226007392814916948161527384273626429809823406320024402449589445612916704950823581248739179964864113348032475777521970893277226234948601504665268143987705161531702669692970492831628550421289814670619533197026950721437823047687528028735412616639170824592517001071418085480063692325946201900227808740985977192180515853214739265325155903541020928466592529991435379182531454529059841581763705892790690989691116438118780943537152133226144362531449012745477269573939348154691631162492887357471882407150399500944673195431619385548520766573882513963916357672315100555603726339486720820780865373494244011579966750736071115935133195919712094896471755302453136477094209463569698222667377520994516845064362382421185353488798939567318780660610788544000550827657030558744854180577889171920788142335113866292966717964346876007704799953788338787034871802184243734211227394025571769081960309201824018842705704609262256417837526526335832424066125331152942345796556950250681001831090041124537901533296615697052237921032570693705109083078947999900499939532215362274847660361367769797856738658467093667958858378879562594646489137665219958828693380183601193236857855855819555604215625088365020332202451376215820461810670519533065306060650105488716724537794283133887163139559690583208341689847606560711834713621812324622725884199028614208728495687963932546428534307530110528571382964370999035694888528519040295604734613113826387889755178856042499874831638280404684861893818959054203988987265069762020199554841265000539442820393012748163815853039643992547020167275932857436666164411096256633730540921951967514832873480895747777527834422109107311135182804603634719818565557295714474768255285786334934285842311874944000322969069775831590385803935352135886007960034209754739229673331064939560181223781285458431760556173386112673478074585067606304822940965304111830667108189303110887172816751957967534718853722930961614320400638132246584111115775835858113501856904781536893813771847281475199835050478129771859908470762197460588742325699582889253504193795826061621184236876851141831606831586799460165205774052942305360178031335726326705479033840125730591233960188013782542192709476733719198728738524805742124892118347087662966720727232565056512933312605950577772754247124164831283298207236175057467387012820957554430596839555568686118839713552208445285264008125202766555767749596962661260456524568408613923826576858338469849977872670655519185446869846947849573462260629421962455708537127277652309895545019303773216664918257815467729200521266714346320963789185232321501897612603437368406719419303774688099929687758244104787812326625318184596045385354383911449677531286426092521153767325886672260404252349108702695809964759580579466397341906401003636190404203311357933654242630356145700901124480089002080147805660371015412232889146572239314507607167064355682743774396578906797268743847307634645167756210309860409271709095128086309029738504452718289274968921210667008164858339553773591913695015316201890888748421079870689911480466927065094076204650277252865072890532854856143316081269300569378541786109696920253886503457718317668688592368148847527649846882194973972970773718718840041432312763650481453112285099002074240925585925292610302106736815434701525234878635164397623586041919412969769040526483234700991115424260127343802208933109668636789869497799400126016422760926082349304118064382913834735467972539926233879158299848645927173405922562074910530853153718291168163721939518870095778818158685046450769934394098743351443162633031724774748689791820923948083314397084067308407958935810896656477585990556376952523265361442478023082681183103773588708924061303133647737101162821461466167940409051861526036009252194721889091810733587196414214447865489952858234394705007983038853886083103571930600277119455802191194289992272235345870756624692617766317885514435021828702668561066500353105021631820601760921798468493686316129372795187307897263735371715025637873357977180818487845886650433582437700414771041493492743845758710715973155943942641257027096512510811554824793940359768118811728247215825010949609662539339538092219559191818855267806214992317276316321833989693807561685591175299845013206712939240414459386239880938124045219148483164621014738918251010909677386906640415897361047643650006807710565671848628149637111883219244566394581449148616550049567698269030891118568798692947051352481609174324301538368470729289898284602223730145265567989862776796809146979837826876431159883210904371561129976652153963546442086919756737000573876497843768628768179249746943842746525631632300555130417422734164645512781278457777245752038654375428282567141288583454443513256205446424101103795546419058116862305964476958705407214198521210673433241075676757581845699069304604752277016700568454396923404171108988899341635058515788735343081552081177207188037910404698306957868547393765643363197978680367187307969392423632144845035477631567025539006542311792015346497792906624150832885839529054263768766896880503331722780018588506973623240389470047189761934734430843744375992503417880797223585913424581314404984770173236169471976571535319775499716278566311904691260918259124989036765417697990362375528652637573376352696934435440047306719886890196814742876779086697968852250163694985673021752313252926537589641517147955953878427849986645630287883196209983049451987439636907068276265748581043911223261879405994155406327013198989570376110532360629867480377915376751158304320849872092028092975264981256916342500052290887264692528466610466539217148208013050229805263783642695973370705392278915351056888393811324975707133102950443034671598944878684711643832805069250776627450012200352620370946602341464899839025258883014867816219677519458316771876275720050543979441245990077115205154619930509838698254284640725554092740313257163264079293418334214709041254253352324802193227707535554679587163835875018159338717423606155117101312352563348582036514614187004920570437201826173319471570086757853933607862273955818579758725874410254207710547536129404746010009409544495966288148691590389907186598056361713769222729076419775517772010427649694961105622059250242021770426962215495872645398922769766031052498085575947163107587013320886146326641259114863388122028444069416948826152957762532501987035987067438046982194205638125583343642194923227593722128905642094308235254408411086454536940496927149400331978286131818618881111840825786592875742638445005994422956858646048103301538891149948693543603022181094346676400002236255057363129462629609619876056425996394613869233083719626595473923462413459779574852464783798079569319865081597767535055391899115133525229873611277918274854200868953965835942196333150286956119201229888988700607999279541118826902307891310760361763477948943203210277335941690865007193280401716384064498787175375678118532132840821657110754952829497493621460821558320568723218557406516109627487437509809223021160998263303391546949464449100451528092508974507489676032409076898365294065792019831526541065813682379198409064571246894847020935776119313998024681340520039478194986620262400890215016616381353838151503773502296607462795291038406868556907015751662419298724448271942933100485482445458071889763300323252582158128032746796200281476243182862217105435289834820827345168018613171959332471107466222850871066611770346535283957762599774467218571581612641114327179434788599089280848669491413909771673690027775850268664654056595039486784111079011610400857274456293842549416759460548711723594642910585090995021495879311219613590831588262068233215615308683373083817327932819698387508708348388046388478441884003184712697454370937329836240287519792080232187874488287284372737801782700805878241074935751488997891173974612932035108143270325140903048746226294234432757126008664250833318768865075642927160552528954492153765175149219636718104943531785838345386525565664065725136357506435323650893679043170259787817719031486796384082881020946149007971513771709906195496964007086766710233004867263147551053723175711432231741141168062286420638890621019235522354671166213749969326932173704310598722503945657492461697826097025335947502091383667377289443869640002811034402608471289900074680776484408871134135250336787731679770937277868216611786534423173226463784769787514433209534000165069213054647689098505020301504488083426184520873053097318949291642532293361243151430657826407028389840984160295030924189712097160164926561341343342229882790992178604267981245728534580133826099587717811310216734025656274400729683406619848067661580502169183372368039902793160642043681207990031626444914619021945822969099212278855394878353830564686488165556229431567312827439082645061162894280350166133669782405177015521962652272545585073864058529983037918035043287670380925216790757120406123759632768567484507915114731344000183257034492090971243580944790046249431345502890068064870429353403743603262582053579011839564908935434510134296961754524957396062149028872893279252069653538639644322538832752249960598697475988232991626354597332444516375533437749292899058117578
1640985616097:length(a)
1640985678318:a <- 
1640985684824:as.numeric(strsplit(as.character(a), "")[[1]])
1640985714246:a
1640985731992:?Inf
1640985964961:pie <- 3.
1640985986608:pie
1640985994519:pie
1640986017942:pie <- 
1640986102872:b <- 39487569283746908
1640986145588:as.numeric(strsplit(as.character(b), "")[[1]])
1640986178327:b <- 39487569283746908843795682374690873986723652176534652346542653
1640986185405:as.numeric(strsplit(as.character(b), "")[[1]])
1640986955148:library(readr)
1640986955172:excelrandbetween10000 <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excelrandbetween10000.csv",
1640986955180:col_names = FALSE)
1640986955459:View(excelrandbetween10000)
1640987037397:library(readr)
1640987037422:excelrandbetween10000 <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excelrandbetween10000.csv",
1640987037429:col_names = FALSE)
1640987097714:ex <- excelrandbetween10000
1640987185395:hist1 <- qplot(ex)
1640987199372:library(ggplot2)
1640987203658:library(readr)
1640987218099:hist1
1640987253990:hist1 <- qplot(data = ex)
1640987258095:hist1
1640987289418:hist1 <- qplot(X1, data = ex)
1640987293140:hist1
1640987393304:library(tidyverse)
1640987459182:mpg$class = with(mpg, reorder(class, hwy, median))
1640987476403:p <- mpg %>%
1640987476412:ggplot( aes(x=class, y=hwy, fill=class)) +
1640987476419:geom_violin() +
1640987476427:xlab("class") +
1640987476434:theme(legend.position="none") +
1640987476441:xlab("")
1640987489854:library(readr)
1640987557869:p <- mpg %>%
1640987557877:ggplot( aes(x=class, y=hwy, fill=class)) +
1640987557886:geom_violin() +
1640987557893:xlab("class") +
1640987557901:theme(legend.position="none") +
1640987557909:xlab("")
1640987563604:p
1640987975168:knitr::opts_chunk$set(echo = TRUE)
1640987975180:library(tidyverse)
1640987975191:library(readr)
1640987975202:library(rmarkdown)
1640987975382:mpg
1640988041252:p <- mpg %>%
1640988041263:+     ggplot( aes(x=class, y=hwy, fill=class)) +
1640988041273:+     geom_violin() +
1640988041284:+     xlab("class") +
1640988041294:+     theme(legend.position="none") +
1640988041304:+     xlab("")
1640988137159:p <- mpg %>%
1640988137169:ggplot( aes(x=class, y=hwy, fill=class)) +
1640988137179:geom_violin() +
1640988137189:xlab("class")
1640988137256:p
1640988178378:p <- mpg %>%
1640988178388:ggplot( aes(x=class, y=hwy, fill=class)) +
1640988178398:geom_violin()
1640988178451:p
1640988221856:p <- mpg %>%
1640988221867:ggplot( aes(x=class, y=hwy, fill=class)) +
1640988221877:geom_violin() +
1640988221887:theme(legend.position="none")
1640988221943:p
1640988613833:library(readr)
1640988613841:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988613896:View(excel_rand)
1640988670862:x <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988707822:library(readr)
1640988707829:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988707866:View(excel_rand)
1640988779575:knitr::opts_chunk$set(echo = TRUE)
1640988779587:library(tidyverse)
1640988781205:library(readr)
1640988781219:library(rmarkdown)
1640988781385:x <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988836488:library(readr)
1640988836496:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988836692:View(excel_rand)
1640988871727:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988897958:excel_rand
1640988938961:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640988957037:setwd("~/BILD 5 sandbox/Lecture Material/3_Why programming")
1640988963952:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640989126333:?binom.test
1640989342906:?chisq.test
1640989513426:chisq.test(random numbers)
1640989530097:chisq.test(excel_rand)
1640989904624:count(excel_rand)
1640989976350:table(excel_rand)
1640990064134:binom.test(5028, 10000)
1640990120293:binom.test(5126, 10000)
1640990222100:binom.test(5126, 10000)
1640990269995:x2 <- c(5028, 4972)
1640990313888:chisq.test(x2, simulate.p.value = TRUE, B = 10000)
1640990529277:knitr::opts_chunk$set(echo = TRUE)
1640990529286:library(tidyverse)
1640990530951:library(readr)
1640990530962:library(rmarkdown)
1640990531173:mpg
1640990531245:p <- mpg %>%
1640990531257:ggplot( aes(x=class, y=hwy, fill=class)) +
1640990531265:geom_violin() +
1640990531274:theme(legend.position="none")
1640990531311:p
1640990531757:excel_rand <- read_csv("BILD 5 sandbox/Lecture Material/3_Why programming/excel_rand.csv")
1640990553034:?read.csv
1640990656181:knitr::opts_chunk$set(echo = TRUE)
1640990656191:library(tidyverse)
1640990657163:library(readr)
1640990657173:library(rmarkdown)
1640990657492:mpg
1640990657573:p <- mpg %>%
1640990657586:ggplot( aes(x=class, y=hwy, fill=class)) +
1640990657596:geom_violin() +
1640990657605:theme(legend.position="none")
1640990657668:p
1640990658026:excel_rand <- read_csv("/excel_rand.csv")
1640990703893:knitr::opts_chunk$set(echo = TRUE)
1640990703903:library(tidyverse)
1640990704799:library(readr)
1640990704809:library(rmarkdown)
1640990705161:mpg
1640990705225:p <- mpg %>%
1640990705236:ggplot( aes(x=class, y=hwy, fill=class)) +
1640990705245:geom_violin() +
1640990705254:theme(legend.position="none")
1640990705337:p
1640990705671:excel_rand <- read_csv("excel_rand.csv")
1640990705883:head(excel_rand)
1640990706008:table(excel_rand)
1640990706056:binom.test(5028, 10000)
1640990706158:x2 <- c(5028, 4972)
1640990706173:chisq.test(x2, simulate.p.value = TRUE, B = 10000)
1640990786510:knitr::opts_chunk$set(echo = TRUE)
1640990786521:library(tidyverse)
1640990787481:library(readr)
1640990787492:library(rmarkdown)
1640990787764:mpg
1640990787832:p <- mpg %>%
1640990787842:ggplot( aes(x=class, y=hwy, fill=class)) +
1640990787852:geom_violin() +
1640990787863:theme(legend.position="none")
1640990787931:p
1640990788272:excel_rand <- read_csv("excel_rand.csv")
1640990788486:excel_rand
1640990788617:table(excel_rand)
1640990788668:binom.test(5028, 10000)
1640990788779:x2 <- c(5028, 4972)
1640990788796:chisq.test(x2, simulate.p.value = TRUE, B = 10000)
1640991159472:?binom.test
1640991471376:?chisq.test
1640991562781:knitr::opts_chunk$set(echo = TRUE)
1640991562790:library(tidyverse)
1640991563785:library(readr)
1640991563795:library(rmarkdown)
1640991564105:mpg
1640991564170:p <- mpg %>%
1640991564180:ggplot( aes(x=class, y=hwy, fill=class)) +
1640991564189:geom_violin() +
1640991564198:theme(legend.position="none")
1640991564261:p
1640991564583:excel_rand <- read_csv("excel_rand.csv")
1640991564819:excel_rand
1640991564974:table(excel_rand)
1640991565028:binom.test(5028, 10000)$p.value
1640991565065:x2 <- c(5028, 4972)
1640991565090:chisq.test(x2)
1640991565134:chisq.test(x2, simulate.p.value = TRUE, B = 10000)
1641850423669:knitr::opts_chunk$set(echo = FALSE)
1641850423682:knitr::opts_chunk$set(echo = TRUE)
1641850423695:library(tidyverse)
1641850425998:library(readr)
1641850426009:library(rmarkdown)
1641850558349:library(tidyverse)
1641850560430:library(readr)
1641850560438:library(rmarkdown)
1641850582423:setwd("~/BILD 5 sandbox/Lecture Material/3_Why programming")
1641850601423:mpg
1641850646060:excel_rand <- read_csv("excel_rand.csv")
1641850656407:excel_rand
1641850667991:table(excel_rand)
1641852300848:library(tidyverse)
1641852303467:library(readr)
1641852303477:library(rmarkdown)
1641852454215:mpg
1641852512902:p <- mpg %>%
1641852512910:ggplot( aes(x=class, y=hwy, fill=class)) +
1641852512918:geom_violin() +
1641852512926:theme(legend.position="none")
1641852558004:p
1641852668876:excel_rand <- read_csv("excel_rand.csv")
1641852684889:excel_rand
1641852762748:table(excel_rand)
1641852846485:binom.test(5028, 10000)$p.value
1641852931450:x2 <- c(5028, 4972)
1641852965061:chisq.test(x2)
1641852990326:chisq.test(x2, simulate.p.value = TRUE, B = 10000)
1641944525789:library(tidyverse)
1641944534777:gapminder
1641944647900:install.packages("gapminder")
1641944680213:library("gapminder")
1641944693736:gap <- gapminder
1641945071572:a <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1641945078658:a
1641945170127:View(gap)
1641945170263:View(gap)
1641945337379:ayear <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1641945341748:ayear
1641946037427:gsplit <- gap %>%
1641946037434:group_by(year)
1641946069875:group_split(gsplit)
1641946217339:a1952 <- ggplot(gapminder[[1]]aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1641946417435:b <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point() + facet_wrap(vars(year))
1641946431408:b
1641946567233:install.packages('gganimate')
1641946638527:library(gganimate)
1641946638654:theme_set(theme_bw())
1641946678659:install.packages('gifski', 'av')
1641946702592:install.packages('gifski')
1641946849369:agif <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point() + transition_time(year) + labs(title = "Year: {frame_time}")
1641946854883:agif
1641947003653:install.packages("gifski")
1641947019565:?gganimate
1641947080442:install.packages(gifski)
1641947098015:install.packages("gifski")
1641947262230:install.packages("gifski", type = "source")
1641947454813:install.packages("magick")
1641947570573:install.packages("cargo")
1641947590584:library(cargo)
1641947610179:install.packages("gifski")
1641948722652:devtools::install_github("r-rust/gifski")
1641948773553:remotes::install_github("r-rust/hellorust")
1641949222050:library(cargo)
1641949244260:agif
1641950017381:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_contour(aes(z=z)) + facet_wrap(vars(year))
1641950038007:library(ggplot2)
1641950040560:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_contour(aes(z=z)) + facet_wrap(vars(year))
1641950051929:library(gapminder)
1641950054456:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_contour(aes(z=z)) + facet_wrap(vars(year))
1641950056650:c
1641950084415:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, z = pop, color = continent)) + geom_contour(aes(z=z)) + facet_wrap(vars(year))
1641950087007:c
1641950116639:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_contour(aes(z=pop)) + facet_wrap(vars(year))
1641950123359:c
1641950156036:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) + geom_contour(aes(z=pop))
1641950157584:c
1641950232692:c <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, z = pop, color = continent)) + geom_rug(sides = "bl")
1641950234524:c
1641950493135:a2007 <- gap %>% dplyr::filter(year == "2007") %>% ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1641950515640:library(tidyverse)
1641950521022:a2007 <- gap %>% dplyr::filter(year == "2007") %>% ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1641950532548:rlang::last_error()
1641950575942:a2007 <- gap %>% dplyr::filter(year == "2007")
1641950613415:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1641950618239:fig2007
1641950643299:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1641950646191:fig2007
1641951045578:fig2007viol <- ggplot(a2007, aes()) + geom_violin(x = continent, y = lifeExp)
1641951084958:fig2007viol <- ggplot(a2007, aes(x = continent, y = lifeExp)) + geom_violin()
1641951090288:fig2007viol
1641951222750:fig2007hex <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, alpha = continent)) + geom_hex()
1641951227569:fig2007hex
1641951270834:fig2007hex <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = continent)) + geom_hex()
1641951272299:fig2007hex
1641951350443:fig2007dens <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, group = continent, size = population)) + geom_density_2d()
1641951356386:fig2007dens
1641951391845:fig2007dens <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, group = continent)) + geom_density_2d()
1641951394429:fig2007dens
1642013257438:library(tidyverse)
1642013259201:library("gapminder")
1642013268803:gap <- gapminder
1642013268816:a <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642013268843:a
1642013275517:ayear <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1642013275530:ayear
1642013292239:b <- ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point() + facet_wrap(vars(year))
1642013292260:b
1642013304763:a2007 <- gap %>% dplyr::filter(year == "2007")
1642013304795:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642013304807:fig2007
1642013312650:fig2007viol <- ggplot(a2007, aes(x = continent, y = lifeExp)) + geom_violin()
1642013312665:fig2007viol
1642192494135:library(tidyverse)
1642192496055:library("gapminder")
1642192496103:gap <- gapminder
1642192501271:a <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642192504786:a
1642192507168:ayear <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1642192511019:b <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point() + facet_wrap(vars(year))
1642192513426:b
1642192519327:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642192524134:fig2007
1642192527878:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642192533539:a2007 <- gap %>% dplyr::filter(year == "2007")
1642192536657:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642192537747:fig2007
1642192545480:fig2007viol <- ggplot(a2007, aes(x = continent, y = lifeExp)) + geom_violin()
1642192546861:fig2007viol
1642200749265:library(tidyverse)
1642200750795:library("gapminder")
1642200762722:gap <- gapminder
1642200791117:a <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642200798715:a
1642200919442:ayear <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = year)) + geom_point()
1642200931457:ayear
1642200970261:b <- ggplot(gap, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point() + facet_wrap(vars(year))
1642200991822:b
1642201041067:a2007 <- gap %>% dplyr::filter(year == "2007")
1642201071941:fig2007 <- ggplot(a2007, aes(x = gdpPercap, y = lifeExp, size = pop, color = continent)) + geom_point()
1642201075208:fig2007
1642201110733:fig2007viol <- ggplot(a2007, aes(x = continent, y = lifeExp)) + geom_violin()
1642201116265:fig2007viol
1642363670781:library(readr)
1642363670805:Week2SA <- read_csv("BILD 5/Section Activities/Section 3/Week2SA.csv")
1642363671120:View(Week2SA)
1642364280974:knitr::opts_chunk$set(echo = FALSE)
1642364280986:knitr::opts_chunk$set(eval = TRUE)
1642364280998:knitr::opts_chunk$set(error = TRUE)
1642364281317:install.packages("ggplot2")
1642364311824:library(ggplot2)
1642364312251:HospitalData<-read.csv(file = "week2SA.csv",header = TRUE,row.names = 1)
1642364312353:fig1<- ggplot(data = HospitalData , aes(x= Hospital,y =Operations))
1642364312431:fig1
1642364312462:fig2<- ggplot(data = HospitalData , aes(x= Hospital,y =Operations))+
1642364312476:geom_bar(stat="identity")
1642364312494:fig2
1642364312533:fig3<- ggplot(data = HospitalData , aes(x= reorder(Hospital,Operations),y =Operations))+
1642364312545:geom_bar(stat="identity")
1642364312564:fig3
1642364312601:fig4<- ggplot(data = HospitalData , aes(x= reorder(Hospital,Operations),y =Operations))+
1642364312614:geom_bar(stat="identity") +
1642364312624:theme_minimal()
1642364312644:fig4
1642364312680:fig5<- ggplot(data = HospitalData , aes(x= reorder(Hospital,Operations),y =Operations))+
1642364312692:geom_bar(stat="identity") +
1642364312703:theme_minimal() +
1642364312714:theme(axis.text.x = element_text(angle=90))
1642364312733:fig5
1642364312771:fig6<- ggplot(data = HospitalData , aes(x= reorder(Hospital,Operations),y =Operations))+
1642364312784:geom_bar(stat="identity") +
1642364312794:theme_minimal() +
1642364312803:theme(axis.text.x = element_text(angle=90))+
1642364312814:xlab("Hospital")
1642364312833:fig6
1642364312879:fig7<- ggplot(data = HospitalData , aes(x= reorder(Hospital,Operations),y =Operations,fill=SurvivalRate))+
1642364312891:geom_bar(stat="identity") +
1642364312901:theme_minimal() +
1642364312910:theme(axis.text.x = element_text(angle=90))+
1642364312920:xlab("Hospital")
1642364312936:fig7
1642364361127:setwd("~/BILD 5/Section Activities/Section 3")
1642364445952:HospitalData<-read.csv(file = "week2SA.csv",header = TRUE,row.names = 1)
1642364552008:HospitalData<- read_csv("week2SA.csv",header = TRUE,row.names = 1)
1642364576135:?read.csv
1642364635697:HospitalData<- read_csv("week2SA.csv",row.names = 1)
1642364645809:HospitalData<- read_table("week2SA.csv",row.names = 1)
1642364727526:library(tidyverse)
1642364778490:?read.csv
1642364826195:read_csv("week2SA.csv",row.names = 1)
1642364892798:Week2SA <- read_csv("Week2SA.csv", row.names = 1)
1642365020856:Week2SA <- read_csv("Week2SA.csv")
1642366311530:head(Week2SA)
1642366321914:Week2SA <- read_csv("Week2SA.csv", row.names = 1)
1642366378265:fig1 <- ggplot(Week2SA, aes(Hospital, Operations))
1642366381582:fig1
1642366927158:?ggsave
1642524860939:librart(tidyverse)
1642524864834:library(tidyverse)
1642524873671:mpg
1642524985676:library(datasets)
1642525005310:beavers
1642525059844:head(beaver1)
1642525292392:head(chickwts)
1642525304630:table(chickwts)
1642525344925:view(chickwts)
1642525414546:head(CO2)
1642525495209:head(ldeaths)
1642525540536:head(HairEyeColor)
1642525586637:hair <- HairEyeColor
1642525609591:view(hair)
1642525853936:table(hair$hair) / nrow(hair)
1642525870464:table(hair$Eye) / nrow(hair)
1642525889487:table(hair)
1642526418688:head(iris)
1642527360059:view(anscombe)
1642527394231:summary(anscombe)
1642527454087:ff <- y ~ x
1642527473286:mods <- setNames(as.list(1:4), paste0("lm", 1:4))
1642527489225:for(i in 1:4) {
1642527489234:ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
1642527489242:## or   ff[[2]] <- as.name(paste0("y", i))
1642527489249:##      ff[[3]] <- as.name(paste0("x", i))
1642527489255:mods[[i]] <- lmi <- lm(ff, data = anscombe)
1642527489262:print(anova(lmi))
1642527489270:}
1642527547558:op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
1642527563628:for(i in 1:4) {
1642527563637:ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
1642527563645:plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
1642527563654:xlim = c(3, 19), ylim = c(3, 13))
1642527563663:abline(mods[[i]], col = "blue")
1642527563671:}
1642527933814:summary(anscombe)
1642528249978:?lr
1642528258419:??linear regression
1642528263980:??linearregression
1642528466258:regress1 <- lm(X1 ~ Y1, data = anscombe)
1642528476178:regress1 <- lm(x1 ~ y1, data = anscombe)
1642528489860:regress2 <- lm(x2 ~ y2, data = anscombe)
1642528500150:regress3 <- lm(x3 ~ y3, data = anscombe)
1642528513118:regress4 <- lm(x4 ~ y4, data = anscombe)
1642528517967:regress1
1642528570890:get_regression_table(regress1)
1642528600971:library(tidyverse)
1642528600982:library(moderndive)
1642528600991:library(skimr)
1642528600999:library(gapminder)
1642528626435:install.packages("moderndive")
1642528664637:library(moderndive)
1642528673102:install.packages("skimr")
1642528689069:library(skimr)
1642528702678:get_regression_table(regress1)
1642528727959:get_regression_table(regress2)
1642528734351:get_regression_table(regress3)
1642528740057:get_regression_table(regress4)
1642528768681:d <- get_regression_table(regress4)
1642528778776:c <- get_regression_table(regress3)
1642528786162:b <- get_regression_table(regress2)
1642528797951:a <- get_regression_table(regress1)
1642528903759:bind_rows(a,b,c,d)
1642528961550:reg <- bind_rows(a,b,c,d)
1642529011274:regclass <- filter(reg, term==intercept)
1642529044321:regclass <- filter(reg, estimate<0)
1642529047981:regclass
1642529059132:regclass <- filter(reg, estimate>0)
1642529061933:regclass
1642617152775:setwd("~/BILD 5/Lecture Material/CLT")
1642617170338:library(skimr)
1642617175147:library(moderndive)
1642617177269:library(ggplot2)
1642617177824:library(gapminder)
1642617192805:view(anscombe)
1642617210038:library(tidyverse)
1642617217571:view(anscombe)
1642617415563:set.seed(2)
1642617420620:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5
1642617424001:min(UniformData)
1642617427174:max(UniformData)
1642617429668:hist(UniformData) #looks like a rectangle!
1642617439326:mean(UniformData) #What would a distribution of means look like?
1642617504101:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642617550331:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642617571942:mean(SquareData) #I want to see what 1000 random means looks like!
1642617610342:?runif
1642617750361:for(i in 1:1000){
1642617750372:Sys.sleep(0.12) #Change to speed up or slow down the demo
1642617750381:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642617750388:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642617750396:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642617750403:}
1642617855082:for(i in 1:1000){
1642617855090:Sys.sleep(0.25) #Change to speed up or slow down the demo
1642617855097:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642617855103:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642617855111:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642617855118:}
1642617897818:set.seed(2)
1642617899942:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642617904506:min(UniformData)
1642617905589:max(UniformData)
1642617907602:hist(UniformData) #looks like a rectangle!
1642617910007:mean(UniformData) #What would a distribution of means look like?
1642617914709:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642617918597:mean(SquareData) #I want to see what 1000 random means looks like!
1642617926910:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642617930242:for(i in 1:1000){
1642617930248:Sys.sleep(0.25) #Change to speed up or slow down the demo
1642617930255:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642617930261:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642617930268:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642617930275:}
1642617992583:###########Central Limit Theorem Visualized#################
1642617992599:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642617992613:set.seed(2)
1642617992620:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642617992634:#What do you expect?
1642617992646:min(UniformData)
1642617992653:max(UniformData)
1642617992665:#What do you expect?
1642617992678:hist(UniformData) #looks like a rectangle!
1642617992749:#What do you  expect the mean to be?
1642617992763:mean(UniformData) #What would a distribution of means look like?
1642617992778:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642617992792:mean(SquareData) #I want to see what 1000 random means looks like!
1642617992805:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642617992817:for(i in 1:1000){
1642617992825:Sys.sleep(0.4) #Change to speed up or slow down the demo
1642617992832:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642617992838:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642617992846:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642617992853:}
1642618072737:###########Central Limit Theorem Visualized#################
1642618072751:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642618072765:set.seed(2)
1642618072773:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618072788:#What do you expect?
1642618072801:min(UniformData)
1642618072808:max(UniformData)
1642618072820:#What do you expect?
1642618072834:hist(UniformData) #looks like a rectangle!
1642618072915:#What do you  expect the mean to be?
1642618072929:mean(UniformData) #What would a distribution of means look like?
1642618072943:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618072957:mean(SquareData) #I want to see what 1000 random means looks like!
1642618072971:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618072984:for(i in 1:1000){
1642618072990:Sys.sleep(0.9) #Change to speed up or slow down the demo
1642618072997:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618073005:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618073012:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618084764:for(i in 1:1000){
1642618084772:Sys.sleep(0.9) #Change to speed up or slow down the demo
1642618084779:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618084787:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618084794:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618084801:}
1642618111415:set.seed(2)
1642618111426:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618111440:#What do you expect?
1642618111454:min(UniformData)
1642618111462:max(UniformData)
1642618111476:#What do you expect?
1642618111490:hist(UniformData) #looks like a rectangle!
1642618111565:#What do you  expect the mean to be?
1642618111578:mean(UniformData) #What would a distribution of means look like?
1642618111593:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618111606:mean(SquareData) #I want to see what 1000 random means looks like!
1642618111619:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618111633:for(i in 1:1000){
1642618111640:Sys.sleep(0.6) #Change to speed up or slow down the demo
1642618111647:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618111655:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618111662:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618111671:}
1642618156783:for(i in 1:1000){
1642618156791:Sys.sleep(0.8) #Change to speed up or slow down the demo
1642618156799:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618156806:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618156813:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618156819:}
1642618197457:for(i in 1:1000){
1642618197463:#Sys.sleep(0.8) #Change to speed up or slow down the demo
1642618197470:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618197476:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618197482:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618197488:}
1642618222200:for(i in 1:1000){
1642618222207:#Sys.sleep(0.8) #Change to speed up or slow down the demo
1642618222214:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618222222:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618222229:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618222236:}
1642618255006:###########Central Limit Theorem Visualized#################
1642618255018:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642618255031:set.seed(2)
1642618255038:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618255052:#What do you expect?
1642618255064:min(UniformData)
1642618255071:max(UniformData)
1642618255084:#What do you expect?
1642618255096:hist(UniformData) #looks like a rectangle!
1642618255113:#What do you  expect the mean to be?
1642618255125:mean(UniformData) #What would a distribution of means look like?
1642618255136:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618255147:mean(SquareData) #I want to see what 1000 random means looks like!
1642618255158:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618255169:for(i in 1:1000){
1642618255175:Sys.sleep(1) #Change to speed up or slow down the demo
1642618255182:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618255188:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618255194:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618255201:}
1642618289420:?Sys.sleep
1642618338084:for(i in 1:1000){
1642618338093:Sys.sleep(.05) #Change to speed up or slow down the demo
1642618338102:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618338110:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618338118:hist(meansofdata,breaks = 10,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618338125:}
1642618439588:meanofmeans <- mean(meansofdata)
1642618442707:meanofmeans
1642618483753:for(i in 1:1000){
1642618483760:Sys.sleep(.02) #Change to speed up or slow down the demo
1642618483767:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618483775:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618483782:hist(meansofdata,breaks = 50,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618483791:}
1642618501383:for(i in 1:1000){
1642618501392:Sys.sleep(.02) #Change to speed up or slow down the demo
1642618501401:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618501408:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618501416:hist(meansofdata,breaks = 50,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618501424:}
1642618538535:for(i in 1:1000){
1642618538543:Sys.sleep(.1) #Change to speed up or slow down the demo
1642618538550:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618538557:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618538566:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618538576:}
1642618565327:###########Central Limit Theorem Visualized#################
1642618565340:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642618565353:set.seed(2)
1642618565361:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618565374:#What do you expect?
1642618565386:min(UniformData)
1642618565393:max(UniformData)
1642618565405:#What do you expect?
1642618565418:hist(UniformData) #looks like a rectangle!
1642618565496:#What do you  expect the mean to be?
1642618565510:mean(UniformData) #What would a distribution of means look like?
1642618565522:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618565535:mean(SquareData) #I want to see what 1000 random means looks like!
1642618565548:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618565560:for(i in 1:1000){
1642618565567:Sys.sleep(.1) #Change to speed up or slow down the demo
1642618565574:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618565581:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618565589:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618565596:}
1642618620578:for(i in 1:1000){
1642618620586:Sys.sleep(.6) #Change to speed up or slow down the demo
1642618620594:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618620602:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618620611:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618620620:}
1642618640516:###########Central Limit Theorem Visualized#################
1642618640531:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642618640543:set.seed(2)
1642618640551:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618640564:#What do you expect?
1642618640577:min(UniformData)
1642618640584:max(UniformData)
1642618640596:#What do you expect?
1642618640608:hist(UniformData) #looks like a rectangle!
1642618640677:#What do you  expect the mean to be?
1642618640690:mean(UniformData) #What would a distribution of means look like?
1642618640703:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618640715:mean(SquareData) #I want to see what 1000 random means looks like!
1642618640728:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618640739:for(i in 1:1000){
1642618640747:Sys.sleep(.6) #Change to speed up or slow down the demo
1642618640754:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618640760:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618640768:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618640775:}
1642618669718:###########Central Limit Theorem Visualized#################
1642618669730:#when every number is equally likely to be randomly drawn, we call that a uniform distribution. When you ask for a random number, what you are really asking for is a random draw from an uniform distribution bound between a min and max.
1642618669745:set.seed(2)
1642618669753:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642618669768:#What do you expect?
1642618669782:min(UniformData)
1642618669790:max(UniformData)
1642618669803:#What do you expect?
1642618669813:hist(UniformData) #looks like a rectangle!
1642618669884:#What do you  expect the mean to be?
1642618669897:mean(UniformData) #What would a distribution of means look like?
1642618669913:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642618669928:mean(SquareData) #I want to see what 1000 random means looks like!
1642618669945:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642618669960:for(i in 1:1000){
1642618669968:Sys.sleep(.06) #Change to speed up or slow down the demo
1642618669977:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642618669986:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642618669994:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642618670004:}
1642618790976:meanofmeans <- mean(meansofdata)
1642618790985:meanofmeans
1642627680430:library(gapminder)
1642627681707:library(ggplot2)
1642627682891:library(moderndive)
1642627683467:library(skimr)
1642627693648:library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
1642630820373:beans <- read.csv(beans.csv)
1642630830049:beans <- read.csv("beans.csv)
1642630836787:beans <- read.csv("beans.csv")
1642630839821:beans <- read.csv("beans.csv")
1642630843632:beans
1642630862838:hist(jelly)
1642630870960:hist(beans)
1642630886643:hist(beans$jelly)
1642630924263:hist(beans$jelly, breaks = 5)
1642630932819:hist(beans$jelly, breaks = 10)
1642630942341:mean(beans)
1642630949125:mean(beans$jelly)
1642630974404:mean(beans$jelly)
1642631015815:view(beans)
1642632790931:set.seed(2)
1642632809834:UniformData <- runif(n = 1000,min = -5,max = 5) # Let's randomly draw 1000 numbers from a uniform distribution ranging from -5 to 5. runif() is the function to draw from a uniform distribution
1642632881282:min(UniformData)
1642632888538:max(UniformData)
1642632901265:hist(UniformData)
1642632935368:mean(UniformData) #What would a distribution of means look like?
1642632968670:SquareData<-runif(n = 5,min = -5,max = 5) #lets start small
1642632973769:mean(SquareData) #I want to see what 1000 random means looks like!
1642632986751:meansofdata<-NA #lets use a loop, starting with an empty vector to fill
1642632992619:for(i in 1:1000){
1642632992627:Sys.sleep(.06) #Change to speed up or slow down the demo
1642632992635:SquareDataSample<-runif(n = 5,min = -5,max = 5) #exactly what we did above
1642632992642:meansofdata[i]<-mean(SquareDataSample) #For each loop in 1000, calculate the mean of the random sample and add it to the vector
1642632992648:hist(meansofdata,breaks = 20,xlim = c(-5,5)) #for each step in the loop, plot a histogram of the saved mean values to that point.
1642632992655:}
1642633112131:meanofmeans <- mean(meansofdata)
1642633114475:meanofmeans
1642721827561:normie <- rnorm(100, 50, 2)
1642721836531:hist(normie)
1642721857496:normie1000 <- rnorm(1000, 50, 2)
1642721867490:hist(normie1000)
1642721904190:hist(normie1000, breaks = 14)
1642721951627:normie100000 <- rnorm(100000, 50, 2)
1642721986574:hist(normie100000, breaks = 14)
1642722029631:?rpois()
1642722081984:pois1000 <- rpois(1000, 2)
1642722101542:hist(pois1000)
1642722192025:??Hypergeometric
1642722383941:?rbinom
1642722446142:urn <- rbinom(50, 1000, 0.5)
1642722461367:hist(urn)
1642722483590:urn <- rbinom(1000, 5, 0.5)
1642722485955:hist(urn)
1642722503358:urn <- rbinom(1000, 1000, 0.5)
1642722504708:hist(urn)
1642722541043:library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
1642722745508:urnhist <- ggplot(urn, aes(urn)) + geom_histogram(binwidth = 2)
1642722861873:urntable <- data.frame(urn)
1642722880666:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 2)
1642722884000:urnhist
1642722898519:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1)
1642722900243:urnhist
1642722938171:urn <- rbinom(10, 1000, 0.5)
1642722946121:hist(urn)
1642722966500:urn <- rbinom(1000, 10, 0.5)
1642722967637:hist(urn)
1642722988860:urn <- rbinom(100, 10, 0.5)
1642722990505:hist(urn)
1642723042251:urntable <- data.frame(urn)
1642723050592:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1)
1642723054972:urnhist
1642723067466:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5)
1642723068758:urnhist
1642723180510:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw
1642723188488:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw()
1642723191476:urnhist
1642723201721:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 1) + theme_bw()
1642723203440:urnhist
1642723288255:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
1642723289686:urnhist
1642723326805:urn <- rbinom(1000, 10, 0.5)
1642723334617:urntable <- data.frame(urn)
1642723343975:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
1642723349231:urnhist
1642723389141:urn <- rbinom(250, 10, 0.5)
1642723394112:urntable <- data.frame(urn)
1642723398776:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw()
1642723403120:urnhist
1642723639450:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5) + theme_bw() + scale_x_continuous(breaks = 10)
1642723641681:urnhist
1642723673658:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth = 0.5, breaks = 10) + theme_bw()
1642723675221:urnhist
1642723788362:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5,boundary=-0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
1642723790582:urnhist
1642723811251:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5,boundary=-0.5)+ scale_x_continuous(breaks=0:11)+ theme_bw()
1642723812888:urnhist
1642723843983:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
1642723845779:urnhist\
1642723848915:urnhist
1642723890175:urn <- rbinom(500, 10, 0.5)
1642723897218:urntable <- data.frame(urn)
1642723906582:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()
1642723910513:urnhist
1642724104943:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + geom_text(aes(label = count), vjust = 0)
1642724107208:urnhist
1642724122331:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + geom_text(aes(label = urn), vjust = 0)
1642724123896:urnhist
1642724374479:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
1642724374486:aes(label = perc),
1642724374493:hjust = 1, nudge_x = -.5
1642724374501:)
1642724379344:urnhist
1642724408340:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
1642724408348:aes(label = count(urn)),
1642724408354:hjust = 1, nudge_x = -.5
1642724408362:)
1642724413765:urnhist
1642724438711:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw()+ geom_text(
1642724438718:aes(label = urn),
1642724438725:hjust = 1, nudge_x = -.5
1642724438732:)
1642724441182:urnhist
1642724549786:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() +stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1))
1642724584072:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1))
1642724594135:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 0.5, geom="text", aes(label=..count..) , vjust = -1)
1642724597482:urnhist
1642724632218:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1)
1642724634092:urnhist
1642724672753:urnhist <- ggplot(urntable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
1642724674675:urnhist
1642724778792:urnout <- add_row(urntable, 50)
1642724788216:urnout <- add_row(urntable, urn, 50)
1642724818166:urnout <- c(urn, 50)
1642724852712:urnouttable <- data.frame(urnout)
1642724874534:urnouthist <- ggplot(urnouttable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:10)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
1642724883741:urnouthist
1642724905983:urnouthist <- ggplot(urnouttable, aes(urn)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
1642724908176:urnouthist
1642724931004:urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ theme_bw() + stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
1642724933718:urnouthist
1642725409936:urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "")
1642725412758:urnouthist
1642725440462:urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_bw
1642725447104:urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_bw()
1642725450546:urnouthist
1642725507780:urnouthist <- ggplot(urnouttable, aes(urnout)) + geom_histogram(binwidth=0.5)+ scale_x_continuous(breaks=0:50)+ stat_bin(binwidth= 1, geom="text", aes(label=..count..) , vjust = -1) + labs(x = "") + theme_classic()
1642725510728:urnouthist
1642882780877:setwd("~/BILD 5/Lecture Material/SE_and_CI")
1642882845895:library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
1642882923765:head(tg)
1642882928172:tg <- ToothGrowth
1642882930438:head(tg)
1642882958939:# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
1642882958946:tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
1642883039341:install.packages("Rmisc")
1642883059828:#http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/
1642883059836:library(Rmisc)
1642883107688:library(tidyverse)
1642883114838:# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
1642883114846:tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
1642883116804:tgc
1642883237878:# Standard error of the mean
1642883237887:ggplot(tgc, aes(x=dose, y=len, color=supp)) +
1642883237897:geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
1642883237905:geom_line() +
1642883237914:geom_point()
1642883244817:# The errorbars overlapped, so use position_dodge to move them horizontally
1642883244825:pd <- position_dodge(0.1) # move them .05 to the left and right
1642883262883:ggplot(tgc, aes(x=dose, y=len, colour=supp)) +
1642883262892:geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1, position=pd) +
1642883262900:geom_line(position=pd) +
1642883262907:geom_point(position=pd)
1642883281081:ggplot(tgc, aes(x=dose, y=len, colour=supp)) +
1642883281090:geom_errorbar(aes(ymin=len-ci, ymax=len+ci), width=.1, position=pd) +
1642883281098:geom_line(position=pd) +
1642883281106:geom_point(position=pd)
1642883313403:# Black error bars - notice the mapping of 'group=supp' -- without it, the error
1642883313413:# bars won't be dodged!
1642883313420:ggplot(tgc, aes(x=dose, y=len, color=supp, group=supp)) +
1642883313428:geom_errorbar(aes(ymin=len-ci, ymax=len+ci), color="black", width=.1, position=pd) +
1642883313436:geom_line(position=pd) +
1642883313444:geom_point(position=pd, size=3)
1642883387917:#Let's class it up and make it look professional!
1642883387926:ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) +
1642883387934:geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
1642883387942:geom_line(position=pd) +
1642883387950:geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
1642883387957:xlab("Dose (mg)") +
1642883387965:ylab("Tooth length") +
1642883387973:scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
1642883387980:breaks=c("OJ", "VC"),
1642883387987:labels=c("Orange juice", "Ascorbic acid"),
1642883387994:l=40) +                    # Use darker colors, lightness=40
1642883388002:ggtitle("The Effect of Vitamin C on\nTooth Growth in Guinea Pigs") +
1642883388009:expand_limits(y=0) +                        # Expand y range
1642883388016:scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
1642883388023:theme_bw() +
1642883388031:theme(legend.justification=c(1,0),
1642883388038:legend.position=c(1,0))               # Position legend in bottom right
1642883400776:#Let's class it up and make it look professional!
1642883400784:ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) +
1642883400792:geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
1642883400799:geom_line(position=pd) +
1642883400806:geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
1642883400812:xlab("Dose (mg)") +
1642883400819:ylab("Tooth length") +
1642883400826:scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
1642883400833:breaks=c("OJ", "VC"),
1642883400841:labels=c("Orange juice", "Ascorbic acid"),
1642883400849:l=40) +                    # Use darker colors, lightness=40
1642883400857:ggtitle("The Effect of Vitamin C on Tooth Growth in Guinea Pigs") +
1642883400864:expand_limits(y=0) +                        # Expand y range
1642883400872:scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
1642883400879:theme_bw() +
1642883400886:theme(legend.justification=c(1,0),
1642883400893:legend.position=c(1,0))               # Position legend in bottom right
1642971388401:library(Rmisc)
1642971388528:library(tidyverse)
1642971399361:tg <- ToothGrowth
1642971399371:head(tg)
1642971407335:tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
1642971407360:tgc
1642972881237:?Rmisc
1642972901645:library(Rmisc)
1642972904821:?Rmisc
1642973117666:t.test.5 <- t.test(len ~ supp, data=tg,
1642973117675:var.equal=FALSE,
1642973117682:conf.level=0.95)
1642973142438:t.test.5
1642974678337:setwd("~/BILD 5/Term project")
1643036191315:knitr::opts_chunk$set(echo = TRUE)
1643036191328:knitr::opts_chunk$set(eval = TRUE)
1643036191337:knitr::opts_chunk$set(error = TRUE)
1643036191348:knitr::opts_chunk$set(tidy = TRUE)
1643036191540:library(tidyverse)
1643036450691:knitr::opts_chunk$set(echo = TRUE)
1643036450712:knitr::opts_chunk$set(eval = TRUE)
1643036450721:knitr::opts_chunk$set(error = TRUE)
1643036450730:knitr::opts_chunk$set(tidy = TRUE)
1643036450762:BadTable<-read_csv(file= "City,2014,2019
1643036450773:San Antonio,1436697,1547253
1643036450782:Houston,2239558,2320268
1643036450790:Austin,912791,978908",show_col_types = FALSE)
1643036450815:GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
1643036450888:head(GoodTable)
1643036480146:BadTable<-read_csv(file= "City,2014,2019
1643036480153:San Antonio,1436697,1547253
1643036480161:Houston,2239558,2320268
1643036480168:Austin,912791,978908")
1643036499778:show(BadTable)
1643036520415:BadTable<-read_csv(file= "City,2014,2019
1643036520422:San Antonio,1436697,1547253
1643036520429:Houston,2239558,2320268
1643036520436:Austin,912791,978908",show_col_types = FALSE)
1643036685310:GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
1643036695470:head(GoodTable)
1643036797108:SmallerCities<-filter(GoodTable,Population<1500000)
1643036797142:head(SmallerCities)
1643036866290:OrderedGoodTable<-arrange(GoodTable,desc(Population))
1643036866319:head(OrderedGoodTable)
1643036915126:setwd("~/BILD 5/Section Activities/Section 4")
1643037261328:flights<-read.csv("flights.csv")
1643037269092:weather<-read.csv("JFKWeather.csv")
1643037339688:CombinedTable<-inner_join(x = flights,y =weather,by="time_hour" )
1643037352736:str(CombinedTable)
1643037549488:MeanDailyTemp<- weather %>%
1643037549500:group_by(day)%>%
1643037549511:summarise(avg=mean(temp))
1643037549540:str(MeanDailyTemp)
1643061066720:setwd("~/BILD 5/Lecture Material/SE_and_CI")
1643235046642:library(Rmisc)
1643235047108:library(tidyverse)
1643235072452:tg <- ToothGrowth
1643235072461:head(tg)
1643235117648:tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
1643235117678:tgc
1643235174784:ggplot(tgc, aes(x=dose, y=len, color=supp)) +
1643235174791:geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1) +
1643235174797:geom_line() +
1643235174804:geom_point()
1643235238144:pd <- position_dodge(0.1)
1643235245315:ggplot(tgc, aes(x=dose, y=len, colour=supp)) +
1643235245322:geom_errorbar(aes(ymin=len-se, ymax=len+se), width=.1, position=pd) +
1643235245332:geom_line(position=pd) +
1643235245340:geom_point(position=pd)
1643235291478:ggplot(tgc, aes(x=dose, y=len, color=supp)) +
1643235291488:geom_errorbar(aes(ymin=len-ci, ymax=len+ci), width=.1, position=pd) +
1643235291496:geom_line(position=pd) +
1643235291503:geom_point(position=pd)
1643235335620:ggplot(tgc, aes(x=dose, y=len, color=supp, group=supp)) +
1643235335627:geom_errorbar(aes(ymin=len-ci, ymax=len+ci), color="black", width=.1, position=pd) +
1643235335633:geom_line(position=pd) +
1643235335639:geom_point(position=pd, size=3)
1643235350069:ggplot(tgc, aes(x=dose, y=len, colour=supp, group=supp)) +
1643235350076:geom_errorbar(aes(ymin=len-se, ymax=len+se), colour="black", width=.1, position=pd) +
1643235350083:geom_line(position=pd) +
1643235350091:geom_point(position=pd, size=3, shape=21, fill="white") + # 21 is filled circle
1643235350099:xlab("Dose (mg)") +
1643235350106:ylab("Tooth length") +
1643235350113:scale_colour_hue(name="Supplement type",    # Legend label, use darker colors
1643235350120:breaks=c("OJ", "VC"),
1643235350126:labels=c("Orange juice", "Ascorbic acid"),
1643235350132:l=40) +                    # Use darker colors, lightness=40
1643235350138:ggtitle("The Effect of Vitamin C on Tooth Growth in Guinea Pigs") +
1643235350144:expand_limits(y=0) +                        # Expand y range
1643235350151:scale_y_continuous(breaks=0:20*4) +         # Set tick every 4
1643235350157:theme_bw() +
1643235350164:theme(legend.justification=c(1,0),
1643235350171:legend.position=c(1,0))
1643235380096:t.test.5 <- t.test(len ~ supp, data=tg,
1643235380104:var.equal=FALSE,
1643235380113:conf.level=0.95)
1643235383804:t.test.5
1643412811389:knitr::opts_chunk$set(echo = TRUE)
1643412811404:knitr::opts_chunk$set(eval = TRUE)
1643412811416:knitr::opts_chunk$set(error = TRUE)
1643412811426:knitr::opts_chunk$set(tidy = TRUE)
1643412811551:library(tidyverse)
1643412813394:BadTable<-read_csv(file= "City,2014,2019
1643412813409:San Antonio,1436697,1547253
1643412813420:Houston,2239558,2320268
1643412813431:Austin,912791,978908")
1643412813488:GoodTable<-pivot_longer(BadTable,cols = 2:3,names_to = "Year",values_to = "Population")
1643412813549:head(GoodTable)
1643412813643:note<-""
1643412813656:print(note)
1643412813696:SmallerCities<-filter(GoodTable,Population<1500000)
1643412813734:head(SmallerCities)
1643412813798:note<-""
1643412813814:print(note)
1643412813853:OrderedGoodTable<-arrange(GoodTable,desc(Population))
1643412813886:head(OrderedGoodTable)
1643412813927:note<-""
1643412813943:print(note)
1643412813977:flights<-read.csv("flights.csv")
1643412814026:weather<-read.csv("JFKWeather.csv")
1643412814096:note<-""
1643412814111:print(note)
1643412814146:CombinedTable<-inner_join(x = flights,y =weather,by="time_hour" )
1643412814188:str(CombinedTable)
1643412814932:note<-""
1643412814948:print(note)
1643412814983:MeanDailyTemp<- weather %>%
1643412814995:group_by(day)%>%
1643412815004:summarise(avg=mean(temp))
1643412815032:str(MeanDailyTemp)
1643412978463:?pivot_longer
1643572788379:setwd("~/BILD 5/Section Activities/Section 5")
1643572816837:knitr::opts_chunk$set(echo = TRUE)
1643572816847:knitr::opts_chunk$set(eval = TRUE)
1643572816857:knitr::opts_chunk$set(error = TRUE)
1643572816866:knitr::opts_chunk$set(tidy = TRUE)
1643572817050:library(tidyverse)
1643572918035:knitr::opts_chunk$set(echo = TRUE)
1643572918045:knitr::opts_chunk$set(eval = TRUE)
1643572918055:knitr::opts_chunk$set(error = TRUE)
1643572918064:knitr::opts_chunk$set(tidy = TRUE)
1643572918088:str(ChemData)
1643572928219:ChemData<-read.csv(file="PlantChemistry.csv")
1643572933838:str(ChemData)
1643572993576:Hist_saponins<-ggplot(data = ChemData,mapping = aes(x = saponins))+
1643572993587:geom_histogram()
1643572993719:Hist_saponins
1643573001429:Hist_tannins<-Hist_saponins<-ggplot(data = ChemData,mapping = aes(x = tannins))+
1643573001440:geom_histogram()
1643573001514:Hist_tannins
1643573094774:?ks.test
1643833012353:library(tidyverse)
1643833725162:library(Rmisc)
1643833772077:library(Rmisc)
1643833781710:library(moderndive)
1643833803509:?summarySE
1643833897248:probset <- c(23, 567, 42, 21, 1, 2, 34, 76)
1643833914585:summarySE(probset)
1643833968219:probtab <- as.table(probset)
1643833977197:summarySE(probtab)
1643834096611:probtab <- as.data.frame(probset)
1643834101185:summarySE(probtab)
1643834143750:summarySE(probtab, probset)
1643834204158:?summarize()
1643834236466:?summarise()
1643925887456:library(Rmisc)
1643925903037:library(tidyverse, lib.loc = "/opt/conda/lib/R/library")
1643925931434:dat <- c(38.4
1643925931443:46.2
1643925931450:62.5
1643925931459:38.0
1643925931468:62.8
1643925931476:33.9
1643925931484:50.4
1643925931492:35.0
1643925931500:52.8
1643925931508:60.1
1643925931515:55.1
1643925931523:57.6
1643925931530:55.5
1643925931538:49.5
1643925931546:40.9
1643925931553:44.3
1643925931560:93.8
1643925931567:47.9
1643925931575:69.2
1643925931583:46.2
1643925931593:56.3)
1643926004837:dat <- c(38.4, 46.2, 62.5, 38.0, 62.8, 33.9, 50.4, 35.0, 52.8, 60.1, 55.1, 57.6, 55.5, 49.5, 40.9, 44.3, 93.8, 47.9, 69.2, 46.2, 56.3)
1643926017192:Mean(dat)
1643926023488:mean(dat)
1643926039719:?confidence interval
1643926049738:?confidenceinterval
1643926055338:??confidenceinterval
1643926074962:CI(dat)
1643926166547:datlo <- filter_if(dat, >70)
1643926178209:datlo <- filter_if(dat, x>70)
1643926186510:?filter_if
1643926236415:datlo <- c(38.4, 46.2, 62.5, 38.0, 62.8, 33.9, 50.4, 35.0, 52.8, 60.1, 55.1, 57.6, 55.5, 49.5, 40.9, 44.3, 47.9, 69.2, 46.2, 56.3)
1643926242077:CI(datlo)
1644266144756:setwd("~/BILD 5/Section Activities/Section 6")
1644266221026:knitr::opts_chunk$set(echo = TRUE)
1644266221037:knitr::opts_chunk$set(eval = TRUE)
1644266221047:knitr::opts_chunk$set(error = TRUE)
1644266221058:knitr::opts_chunk$set(tidy = TRUE)
1644266221240:W6Data<-read.csv("Week6SoilData.csv")
1644266224946:head(W6Data)
1644266290570:High_Inorganic_N<-sum(W6Data$SoilN2018>0.2)
1644266294398:High_Inorganic_N
1644266317434:GardenData<-pivot_longer(data = W6Data,cols = 2:3,names_to = "Year",values_to = "InorganicN")
1644266320049:str(GardenData)
1644266329589:Histogram1<-ggplot(data = GardenData,mapping = aes(x =InorganicN ))+
1644266329601:geom_histogram()
1644266331820:Histogram1
1644266345438:T_Garden_Data<-mutate(.data = GardenData,sqrtN=sqrt(InorganicN))
1644266349789:str(T_Garden_Data)
1644266363690:Histogram2<-ggplot(data = T_Garden_Data,mapping = aes(x =sqrtN ))+
1644266363700:geom_histogram()
1644266365937:Histogram2
1644266388679:ks.test(x = T_Garden_Data$sqrtN,y = "pnorm", mean(T_Garden_Data$sqrtN),sd(T_Garden_Data$sqrtN))
1644266409274:Boxplot1<-ggplot(data = T_Garden_Data,mapping = aes(x = Year,y = sqrtN))+
1644266409284:geom_boxplot()+
1644266409295:theme_minimal() +
1644266409304:ylab("Square root of Inorganic Nitrogen")
1644266412239:Boxplot1
1644266428889:t_mean<-mean(T_Garden_Data$sqrtN)
1644266431850:tsd<-sd(T_Garden_Data$sqrtN)
1644266444538:t_upper<-qnorm(0.975)*tsd+t_mean
1644266448731:# If they use 1.96 instead of qnorm here that is fine.
1644266448740:t_lower<-qnorm(0.025)*tsd+t_mean
1644266451987:upperCI<-t_upper^2
1644266459247:meanN<-t_mean^2
1644266463391:lowerCI<-t_lower^2
1644266465515:cbind(upperCI,meanN,lowerCI)
1644267080768:setwd("~/BILD 5/Term project")
1644423643786:setwd("~/BILD 5/Term project")
